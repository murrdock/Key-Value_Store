// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddToHashTable_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddToHashTable_HashMapEntry_DoNotUse_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AllStateUpdate_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteNode_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetVal_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetValResponse_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Join_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JoinMe_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_List_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Node_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestRoutingEntry_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResponseLeafSet_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResponseNeighbourSet_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResponseRoutingEntry_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RoutingUpdate_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoutingUpdate_RoutingEntry_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetVal_message_2eproto;
namespace message {
class JoinMeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JoinMe> _instance;
} _JoinMe_default_instance_;
class JoinDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Join> _instance;
} _Join_default_instance_;
class NodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Node> _instance;
} _Node_default_instance_;
class ListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<List> _instance;
} _List_default_instance_;
class RoutingUpdate_RoutingEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoutingUpdate_RoutingEntry> _instance;
} _RoutingUpdate_RoutingEntry_default_instance_;
class RoutingUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoutingUpdate> _instance;
} _RoutingUpdate_default_instance_;
class AllStateUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllStateUpdate> _instance;
} _AllStateUpdate_default_instance_;
class GetValDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetVal> _instance;
} _GetVal_default_instance_;
class GetValResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetValResponse> _instance;
} _GetValResponse_default_instance_;
class SetValDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetVal> _instance;
} _SetVal_default_instance_;
class MessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message> _instance;
  const ::message::JoinMe* joinmemsg_;
  const ::message::Join* joinmsg_;
  const ::message::GetVal* getvalmsg_;
  const ::message::SetVal* setvalmsg_;
  const ::message::RoutingUpdate* routingupdate_;
  const ::message::AllStateUpdate* allstateupdate_;
  const ::message::GetValResponse* getvalresponse_;
  const ::message::DeleteNode* deletenode_;
  const ::message::AddToHashTable* addtohashtable_;
  const ::message::ResponseLeafSet* responseleafset_;
  const ::message::ResponseNeighbourSet* responseneighbourset_;
  const ::message::RequestRoutingEntry* requestroutingentry_;
  const ::message::ResponseRoutingEntry* responseroutingentry_;
} _Message_default_instance_;
class ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response> _instance;
} _Response_default_instance_;
class DeleteNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteNode> _instance;
} _DeleteNode_default_instance_;
class AddToHashTable_HashMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddToHashTable_HashMapEntry_DoNotUse> _instance;
} _AddToHashTable_HashMapEntry_DoNotUse_default_instance_;
class AddToHashTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddToHashTable> _instance;
} _AddToHashTable_default_instance_;
class ShutDownDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShutDown> _instance;
} _ShutDown_default_instance_;
class ResponseLeafSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResponseLeafSet> _instance;
} _ResponseLeafSet_default_instance_;
class ResponseNeighbourSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResponseNeighbourSet> _instance;
} _ResponseNeighbourSet_default_instance_;
class ResponseRoutingEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResponseRoutingEntry> _instance;
} _ResponseRoutingEntry_default_instance_;
class RequestRoutingEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestRoutingEntry> _instance;
} _RequestRoutingEntry_default_instance_;
}  // namespace message
static void InitDefaultsscc_info_AddToHashTable_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_AddToHashTable_default_instance_;
    new (ptr) ::message::AddToHashTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::AddToHashTable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddToHashTable_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddToHashTable_message_2eproto}, {
      &scc_info_AddToHashTable_HashMapEntry_DoNotUse_message_2eproto.base,}};

static void InitDefaultsscc_info_AddToHashTable_HashMapEntry_DoNotUse_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_AddToHashTable_HashMapEntry_DoNotUse_default_instance_;
    new (ptr) ::message::AddToHashTable_HashMapEntry_DoNotUse();
  }
  ::message::AddToHashTable_HashMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddToHashTable_HashMapEntry_DoNotUse_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddToHashTable_HashMapEntry_DoNotUse_message_2eproto}, {}};

static void InitDefaultsscc_info_AllStateUpdate_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_AllStateUpdate_default_instance_;
    new (ptr) ::message::AllStateUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::AllStateUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AllStateUpdate_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AllStateUpdate_message_2eproto}, {
      &scc_info_List_message_2eproto.base,}};

static void InitDefaultsscc_info_DeleteNode_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_DeleteNode_default_instance_;
    new (ptr) ::message::DeleteNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::DeleteNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteNode_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteNode_message_2eproto}, {
      &scc_info_Node_message_2eproto.base,}};

static void InitDefaultsscc_info_GetVal_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_GetVal_default_instance_;
    new (ptr) ::message::GetVal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::GetVal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetVal_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetVal_message_2eproto}, {
      &scc_info_Node_message_2eproto.base,}};

static void InitDefaultsscc_info_GetValResponse_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_GetValResponse_default_instance_;
    new (ptr) ::message::GetValResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::GetValResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetValResponse_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetValResponse_message_2eproto}, {}};

static void InitDefaultsscc_info_Join_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_Join_default_instance_;
    new (ptr) ::message::Join();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::Join::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Join_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Join_message_2eproto}, {}};

static void InitDefaultsscc_info_JoinMe_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_JoinMe_default_instance_;
    new (ptr) ::message::JoinMe();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::JoinMe::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JoinMe_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JoinMe_message_2eproto}, {}};

static void InitDefaultsscc_info_List_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_List_default_instance_;
    new (ptr) ::message::List();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::List::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_List_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_List_message_2eproto}, {
      &scc_info_Node_message_2eproto.base,}};

static void InitDefaultsscc_info_Message_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_Message_default_instance_;
    new (ptr) ::message::Message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::Message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_Message_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 14, 0, InitDefaultsscc_info_Message_message_2eproto}, {
      &scc_info_Node_message_2eproto.base,
      &scc_info_JoinMe_message_2eproto.base,
      &scc_info_Join_message_2eproto.base,
      &scc_info_GetVal_message_2eproto.base,
      &scc_info_SetVal_message_2eproto.base,
      &scc_info_RoutingUpdate_message_2eproto.base,
      &scc_info_AllStateUpdate_message_2eproto.base,
      &scc_info_GetValResponse_message_2eproto.base,
      &scc_info_DeleteNode_message_2eproto.base,
      &scc_info_AddToHashTable_message_2eproto.base,
      &scc_info_ResponseLeafSet_message_2eproto.base,
      &scc_info_ResponseNeighbourSet_message_2eproto.base,
      &scc_info_RequestRoutingEntry_message_2eproto.base,
      &scc_info_ResponseRoutingEntry_message_2eproto.base,}};

static void InitDefaultsscc_info_Node_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_Node_default_instance_;
    new (ptr) ::message::Node();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::Node::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Node_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Node_message_2eproto}, {}};

static void InitDefaultsscc_info_RequestRoutingEntry_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_RequestRoutingEntry_default_instance_;
    new (ptr) ::message::RequestRoutingEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::RequestRoutingEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestRoutingEntry_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestRoutingEntry_message_2eproto}, {}};

static void InitDefaultsscc_info_Response_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_Response_default_instance_;
    new (ptr) ::message::Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Response_message_2eproto}, {}};

static void InitDefaultsscc_info_ResponseLeafSet_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_ResponseLeafSet_default_instance_;
    new (ptr) ::message::ResponseLeafSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::ResponseLeafSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResponseLeafSet_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ResponseLeafSet_message_2eproto}, {
      &scc_info_List_message_2eproto.base,}};

static void InitDefaultsscc_info_ResponseNeighbourSet_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_ResponseNeighbourSet_default_instance_;
    new (ptr) ::message::ResponseNeighbourSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::ResponseNeighbourSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResponseNeighbourSet_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ResponseNeighbourSet_message_2eproto}, {
      &scc_info_List_message_2eproto.base,}};

static void InitDefaultsscc_info_ResponseRoutingEntry_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_ResponseRoutingEntry_default_instance_;
    new (ptr) ::message::ResponseRoutingEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::ResponseRoutingEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResponseRoutingEntry_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ResponseRoutingEntry_message_2eproto}, {
      &scc_info_List_message_2eproto.base,}};

static void InitDefaultsscc_info_RoutingUpdate_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_RoutingUpdate_default_instance_;
    new (ptr) ::message::RoutingUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::RoutingUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RoutingUpdate_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RoutingUpdate_message_2eproto}, {
      &scc_info_List_message_2eproto.base,
      &scc_info_RoutingUpdate_RoutingEntry_message_2eproto.base,}};

static void InitDefaultsscc_info_RoutingUpdate_RoutingEntry_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_RoutingUpdate_RoutingEntry_default_instance_;
    new (ptr) ::message::RoutingUpdate_RoutingEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::RoutingUpdate_RoutingEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoutingUpdate_RoutingEntry_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RoutingUpdate_RoutingEntry_message_2eproto}, {
      &scc_info_List_message_2eproto.base,}};

static void InitDefaultsscc_info_SetVal_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_SetVal_default_instance_;
    new (ptr) ::message::SetVal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::SetVal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetVal_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetVal_message_2eproto}, {
      &scc_info_Node_message_2eproto.base,}};

static void InitDefaultsscc_info_ShutDown_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_ShutDown_default_instance_;
    new (ptr) ::message::ShutDown();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::ShutDown::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShutDown_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShutDown_message_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2eproto[20];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_message_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::JoinMe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::JoinMe, nodeid_),
  PROTOBUF_FIELD_OFFSET(::message::JoinMe, ip_),
  PROTOBUF_FIELD_OFFSET(::message::JoinMe, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::Join, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::Join, nodeid_),
  PROTOBUF_FIELD_OFFSET(::message::Join, ip_),
  PROTOBUF_FIELD_OFFSET(::message::Join, port_),
  PROTOBUF_FIELD_OFFSET(::message::Join, row_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::Node, nodeid_),
  PROTOBUF_FIELD_OFFSET(::message::Node, ip_),
  PROTOBUF_FIELD_OFFSET(::message::Node, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::List, node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::RoutingUpdate_RoutingEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::RoutingUpdate_RoutingEntry, index_),
  PROTOBUF_FIELD_OFFSET(::message::RoutingUpdate_RoutingEntry, nodelist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::RoutingUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::RoutingUpdate, buddy_),
  PROTOBUF_FIELD_OFFSET(::message::RoutingUpdate, terminal_),
  PROTOBUF_FIELD_OFFSET(::message::RoutingUpdate, leaf_),
  PROTOBUF_FIELD_OFFSET(::message::RoutingUpdate, neighbours_),
  PROTOBUF_FIELD_OFFSET(::message::RoutingUpdate, routingentires_),
  PROTOBUF_FIELD_OFFSET(::message::RoutingUpdate, prefix_match_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::AllStateUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::AllStateUpdate, leaf_),
  PROTOBUF_FIELD_OFFSET(::message::AllStateUpdate, routingtable_),
  PROTOBUF_FIELD_OFFSET(::message::AllStateUpdate, neighbours_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::GetVal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::GetVal, key_),
  PROTOBUF_FIELD_OFFSET(::message::GetVal, node_),
  PROTOBUF_FIELD_OFFSET(::message::GetVal, actual_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::GetValResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::GetValResponse, key_),
  PROTOBUF_FIELD_OFFSET(::message::GetValResponse, value_),
  PROTOBUF_FIELD_OFFSET(::message::GetValResponse, actual_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::SetVal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::SetVal, key_),
  PROTOBUF_FIELD_OFFSET(::message::SetVal, val_),
  PROTOBUF_FIELD_OFFSET(::message::SetVal, node_),
  PROTOBUF_FIELD_OFFSET(::message::SetVal, terminal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::message::Message, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::Message, type_),
  PROTOBUF_FIELD_OFFSET(::message::Message, sender_),
  offsetof(::message::MessageDefaultTypeInternal, joinmemsg_),
  offsetof(::message::MessageDefaultTypeInternal, joinmsg_),
  offsetof(::message::MessageDefaultTypeInternal, getvalmsg_),
  offsetof(::message::MessageDefaultTypeInternal, setvalmsg_),
  offsetof(::message::MessageDefaultTypeInternal, routingupdate_),
  offsetof(::message::MessageDefaultTypeInternal, allstateupdate_),
  offsetof(::message::MessageDefaultTypeInternal, getvalresponse_),
  offsetof(::message::MessageDefaultTypeInternal, deletenode_),
  offsetof(::message::MessageDefaultTypeInternal, addtohashtable_),
  offsetof(::message::MessageDefaultTypeInternal, responseleafset_),
  offsetof(::message::MessageDefaultTypeInternal, responseneighbourset_),
  offsetof(::message::MessageDefaultTypeInternal, requestroutingentry_),
  offsetof(::message::MessageDefaultTypeInternal, responseroutingentry_),
  PROTOBUF_FIELD_OFFSET(::message::Message, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::Response, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::DeleteNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::DeleteNode, node_),
  PROTOBUF_FIELD_OFFSET(::message::AddToHashTable_HashMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::message::AddToHashTable_HashMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::AddToHashTable_HashMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::message::AddToHashTable_HashMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::AddToHashTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::AddToHashTable, hashmap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::ShutDown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::ResponseLeafSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::ResponseLeafSet, leaf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::ResponseNeighbourSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::ResponseNeighbourSet, neighbours_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::ResponseRoutingEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::ResponseRoutingEntry, routingentry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::RequestRoutingEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::RequestRoutingEntry, index_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::message::JoinMe)},
  { 8, -1, sizeof(::message::Join)},
  { 17, -1, sizeof(::message::Node)},
  { 25, -1, sizeof(::message::List)},
  { 31, -1, sizeof(::message::RoutingUpdate_RoutingEntry)},
  { 38, -1, sizeof(::message::RoutingUpdate)},
  { 49, -1, sizeof(::message::AllStateUpdate)},
  { 57, -1, sizeof(::message::GetVal)},
  { 65, -1, sizeof(::message::GetValResponse)},
  { 73, -1, sizeof(::message::SetVal)},
  { 82, -1, sizeof(::message::Message)},
  { 103, -1, sizeof(::message::Response)},
  { 109, -1, sizeof(::message::DeleteNode)},
  { 115, 122, sizeof(::message::AddToHashTable_HashMapEntry_DoNotUse)},
  { 124, -1, sizeof(::message::AddToHashTable)},
  { 130, -1, sizeof(::message::ShutDown)},
  { 135, -1, sizeof(::message::ResponseLeafSet)},
  { 141, -1, sizeof(::message::ResponseNeighbourSet)},
  { 147, -1, sizeof(::message::ResponseRoutingEntry)},
  { 153, -1, sizeof(::message::RequestRoutingEntry)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_JoinMe_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_Join_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_List_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_RoutingUpdate_RoutingEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_RoutingUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_AllStateUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_GetVal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_GetValResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_SetVal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_Message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_DeleteNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_AddToHashTable_HashMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_AddToHashTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_ShutDown_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_ResponseLeafSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_ResponseNeighbourSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_ResponseRoutingEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_RequestRoutingEntry_default_instance_),
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\022\007message\032\037google/protobu"
  "f/timestamp.proto\"2\n\006JoinMe\022\016\n\006nodeID\030\001 "
  "\001(\t\022\n\n\002IP\030\002 \001(\t\022\014\n\004port\030\003 \001(\t\"C\n\004Join\022\016\n"
  "\006nodeID\030\001 \001(\t\022\n\n\002IP\030\002 \001(\t\022\014\n\004port\030\003 \001(\t\022"
  "\021\n\trow_index\030\004 \001(\005\"0\n\004Node\022\016\n\006nodeID\030\001 \001"
  "(\t\022\n\n\002IP\030\002 \001(\t\022\014\n\004port\030\003 \001(\t\"#\n\004List\022\033\n\004"
  "node\030\001 \003(\0132\r.message.Node\"\203\002\n\rRoutingUpd"
  "ate\022\r\n\005buddy\030\001 \001(\010\022\020\n\010terminal\030\002 \001(\010\022\033\n\004"
  "leaf\030\003 \001(\0132\r.message.List\022!\n\nneighbours\030"
  "\004 \001(\0132\r.message.List\022;\n\016routingEntires\030\005"
  " \003(\0132#.message.RoutingUpdate.RoutingEntr"
  "y\022\024\n\014prefix_match\030\006 \001(\005\032>\n\014RoutingEntry\022"
  "\r\n\005index\030\001 \001(\005\022\037\n\010nodeList\030\002 \001(\0132\r.messa"
  "ge.List\"u\n\016AllStateUpdate\022\033\n\004leaf\030\001 \001(\0132"
  "\r.message.List\022#\n\014routingTable\030\002 \003(\0132\r.m"
  "essage.List\022!\n\nneighbours\030\003 \001(\0132\r.messag"
  "e.List\"F\n\006GetVal\022\013\n\003key\030\001 \001(\t\022\033\n\004node\030\002 "
  "\001(\0132\r.message.Node\022\022\n\nactual_key\030\003 \001(\t\"@"
  "\n\016GetValResponse\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002"
  " \001(\t\022\022\n\nactual_key\030\003 \001(\t\"Q\n\006SetVal\022\013\n\003ke"
  "y\030\001 \001(\t\022\013\n\003val\030\002 \001(\t\022\033\n\004node\030\003 \001(\0132\r.mes"
  "sage.Node\022\020\n\010terminal\030\004 \001(\010\"\266\005\n\007Message\022"
  "\014\n\004type\030\001 \001(\t\022\035\n\006sender\030\002 \001(\0132\r.message."
  "Node\022$\n\tjoinMeMsg\030\003 \001(\0132\017.message.JoinMe"
  "H\000\022 \n\007joinMsg\030\004 \001(\0132\r.message.JoinH\000\022$\n\t"
  "getValMsg\030\005 \001(\0132\017.message.GetValH\000\022$\n\tse"
  "tValMsg\030\006 \001(\0132\017.message.SetValH\000\022/\n\rrout"
  "ingUpdate\030\007 \001(\0132\026.message.RoutingUpdateH"
  "\000\0221\n\016allStateUpdate\030\010 \001(\0132\027.message.AllS"
  "tateUpdateH\000\0221\n\016getValResponse\030\t \001(\0132\027.m"
  "essage.GetValResponseH\000\022)\n\ndeleteNode\030\n "
  "\001(\0132\023.message.DeleteNodeH\000\0221\n\016addToHashT"
  "able\030\013 \001(\0132\027.message.AddToHashTableH\000\0223\n"
  "\017responseLeafSet\030\014 \001(\0132\030.message.Respons"
  "eLeafSetH\000\022=\n\024responseNeighbourSet\030\r \001(\013"
  "2\035.message.ResponseNeighbourSetH\000\022;\n\023req"
  "uestRoutingEntry\030\016 \001(\0132\034.message.Request"
  "RoutingEntryH\000\022=\n\024responseRoutingEntry\030\017"
  " \001(\0132\035.message.ResponseRoutingEntryH\000B\005\n"
  "\003msg\"\032\n\010Response\022\016\n\006status\030\001 \001(\t\")\n\nDele"
  "teNode\022\033\n\004node\030\001 \001(\0132\r.message.Node\"w\n\016A"
  "ddToHashTable\0225\n\007hashMap\030\001 \003(\0132$.message"
  ".AddToHashTable.HashMapEntry\032.\n\014HashMapE"
  "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\n\n\010"
  "ShutDown\".\n\017ResponseLeafSet\022\033\n\004leaf\030\001 \001("
  "\0132\r.message.List\"9\n\024ResponseNeighbourSet"
  "\022!\n\nneighbours\030\001 \001(\0132\r.message.List\";\n\024R"
  "esponseRoutingEntry\022#\n\014routingEntry\030\001 \001("
  "\0132\r.message.List\"$\n\023RequestRoutingEntry\022"
  "\r\n\005index\030\001 \001(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_message_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_message_2eproto_sccs[20] = {
  &scc_info_AddToHashTable_message_2eproto.base,
  &scc_info_AddToHashTable_HashMapEntry_DoNotUse_message_2eproto.base,
  &scc_info_AllStateUpdate_message_2eproto.base,
  &scc_info_DeleteNode_message_2eproto.base,
  &scc_info_GetVal_message_2eproto.base,
  &scc_info_GetValResponse_message_2eproto.base,
  &scc_info_Join_message_2eproto.base,
  &scc_info_JoinMe_message_2eproto.base,
  &scc_info_List_message_2eproto.base,
  &scc_info_Message_message_2eproto.base,
  &scc_info_Node_message_2eproto.base,
  &scc_info_RequestRoutingEntry_message_2eproto.base,
  &scc_info_Response_message_2eproto.base,
  &scc_info_ResponseLeafSet_message_2eproto.base,
  &scc_info_ResponseNeighbourSet_message_2eproto.base,
  &scc_info_ResponseRoutingEntry_message_2eproto.base,
  &scc_info_RoutingUpdate_message_2eproto.base,
  &scc_info_RoutingUpdate_RoutingEntry_message_2eproto.base,
  &scc_info_SetVal_message_2eproto.base,
  &scc_info_ShutDown_message_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto = {
  false, false, descriptor_table_protodef_message_2eproto, "message.proto", 1982,
  &descriptor_table_message_2eproto_once, descriptor_table_message_2eproto_sccs, descriptor_table_message_2eproto_deps, 20, 1,
  schemas, file_default_instances, TableStruct_message_2eproto::offsets,
  file_level_metadata_message_2eproto, 20, file_level_enum_descriptors_message_2eproto, file_level_service_descriptors_message_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_message_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_message_2eproto)), true);
namespace message {

// ===================================================================

void JoinMe::InitAsDefaultInstance() {
}
class JoinMe::_Internal {
 public:
};

JoinMe::JoinMe(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:message.JoinMe)
}
JoinMe::JoinMe(const JoinMe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nodeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nodeid().empty()) {
    nodeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_nodeid(),
      GetArena());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_port().empty()) {
    port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_port(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:message.JoinMe)
}

void JoinMe::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JoinMe_message_2eproto.base);
  nodeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

JoinMe::~JoinMe() {
  // @@protoc_insertion_point(destructor:message.JoinMe)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JoinMe::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nodeid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JoinMe::ArenaDtor(void* object) {
  JoinMe* _this = reinterpret_cast< JoinMe* >(object);
  (void)_this;
}
void JoinMe::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinMe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoinMe& JoinMe::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JoinMe_message_2eproto.base);
  return *internal_default_instance();
}


void JoinMe::Clear() {
// @@protoc_insertion_point(message_clear_start:message.JoinMe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodeid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinMe::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string nodeID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nodeid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "message.JoinMe.nodeID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string IP = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "message.JoinMe.IP"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_port();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "message.JoinMe.port"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinMe::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.JoinMe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nodeID = 1;
  if (this->nodeid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodeid().data(), static_cast<int>(this->_internal_nodeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.JoinMe.nodeID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nodeid(), target);
  }

  // string IP = 2;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.JoinMe.IP");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // string port = 3;
  if (this->port().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_port().data(), static_cast<int>(this->_internal_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.JoinMe.port");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.JoinMe)
  return target;
}

size_t JoinMe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.JoinMe)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nodeID = 1;
  if (this->nodeid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodeid());
  }

  // string IP = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string port = 3;
  if (this->port().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinMe::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.JoinMe)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinMe* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoinMe>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.JoinMe)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.JoinMe)
    MergeFrom(*source);
  }
}

void JoinMe::MergeFrom(const JoinMe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.JoinMe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nodeid().size() > 0) {
    _internal_set_nodeid(from._internal_nodeid());
  }
  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.port().size() > 0) {
    _internal_set_port(from._internal_port());
  }
}

void JoinMe::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.JoinMe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinMe::CopyFrom(const JoinMe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.JoinMe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinMe::IsInitialized() const {
  return true;
}

void JoinMe::InternalSwap(JoinMe* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nodeid_.Swap(&other->nodeid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port_.Swap(&other->port_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinMe::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Join::InitAsDefaultInstance() {
}
class Join::_Internal {
 public:
};

Join::Join(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:message.Join)
}
Join::Join(const Join& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nodeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nodeid().empty()) {
    nodeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_nodeid(),
      GetArena());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_port().empty()) {
    port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_port(),
      GetArena());
  }
  row_index_ = from.row_index_;
  // @@protoc_insertion_point(copy_constructor:message.Join)
}

void Join::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Join_message_2eproto.base);
  nodeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  row_index_ = 0;
}

Join::~Join() {
  // @@protoc_insertion_point(destructor:message.Join)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Join::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nodeid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Join::ArenaDtor(void* object) {
  Join* _this = reinterpret_cast< Join* >(object);
  (void)_this;
}
void Join::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Join::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Join& Join::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Join_message_2eproto.base);
  return *internal_default_instance();
}


void Join::Clear() {
// @@protoc_insertion_point(message_clear_start:message.Join)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodeid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  row_index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Join::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string nodeID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nodeid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "message.Join.nodeID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string IP = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "message.Join.IP"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_port();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "message.Join.port"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 row_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          row_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Join::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.Join)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nodeID = 1;
  if (this->nodeid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodeid().data(), static_cast<int>(this->_internal_nodeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.Join.nodeID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nodeid(), target);
  }

  // string IP = 2;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.Join.IP");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // string port = 3;
  if (this->port().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_port().data(), static_cast<int>(this->_internal_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.Join.port");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_port(), target);
  }

  // int32 row_index = 4;
  if (this->row_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_row_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.Join)
  return target;
}

size_t Join::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.Join)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nodeID = 1;
  if (this->nodeid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodeid());
  }

  // string IP = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string port = 3;
  if (this->port().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_port());
  }

  // int32 row_index = 4;
  if (this->row_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_row_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Join::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.Join)
  GOOGLE_DCHECK_NE(&from, this);
  const Join* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Join>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.Join)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.Join)
    MergeFrom(*source);
  }
}

void Join::MergeFrom(const Join& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.Join)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nodeid().size() > 0) {
    _internal_set_nodeid(from._internal_nodeid());
  }
  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.port().size() > 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.row_index() != 0) {
    _internal_set_row_index(from._internal_row_index());
  }
}

void Join::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.Join)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Join::CopyFrom(const Join& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.Join)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Join::IsInitialized() const {
  return true;
}

void Join::InternalSwap(Join* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nodeid_.Swap(&other->nodeid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port_.Swap(&other->port_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(row_index_, other->row_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Join::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Node::InitAsDefaultInstance() {
}
class Node::_Internal {
 public:
};

Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:message.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nodeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nodeid().empty()) {
    nodeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_nodeid(),
      GetArena());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_port().empty()) {
    port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_port(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:message.Node)
}

void Node::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Node_message_2eproto.base);
  nodeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:message.Node)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Node::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nodeid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Node::ArenaDtor(void* object) {
  Node* _this = reinterpret_cast< Node* >(object);
  (void)_this;
}
void Node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Node& Node::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Node_message_2eproto.base);
  return *internal_default_instance();
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:message.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodeid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string nodeID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nodeid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "message.Node.nodeID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string IP = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "message.Node.IP"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_port();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "message.Node.port"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Node::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nodeID = 1;
  if (this->nodeid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodeid().data(), static_cast<int>(this->_internal_nodeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.Node.nodeID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nodeid(), target);
  }

  // string IP = 2;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.Node.IP");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // string port = 3;
  if (this->port().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_port().data(), static_cast<int>(this->_internal_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.Node.port");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.Node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nodeID = 1;
  if (this->nodeid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodeid());
  }

  // string IP = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string port = 3;
  if (this->port().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.Node)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nodeid().size() > 0) {
    _internal_set_nodeid(from._internal_nodeid());
  }
  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.port().size() > 0) {
    _internal_set_port(from._internal_port());
  }
}

void Node::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nodeid_.Swap(&other->nodeid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port_.Swap(&other->port_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void List::InitAsDefaultInstance() {
}
class List::_Internal {
 public:
};

List::List(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  node_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:message.List)
}
List::List(const List& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      node_(from.node_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.List)
}

void List::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_List_message_2eproto.base);
}

List::~List() {
  // @@protoc_insertion_point(destructor:message.List)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void List::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void List::ArenaDtor(void* object) {
  List* _this = reinterpret_cast< List* >(object);
  (void)_this;
}
void List::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void List::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const List& List::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_List_message_2eproto.base);
  return *internal_default_instance();
}


void List::Clear() {
// @@protoc_insertion_point(message_clear_start:message.List)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* List::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .message.Node node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* List::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.List)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message.Node node = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_node(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.List)
  return target;
}

size_t List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.List)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.Node node = 1;
  total_size += 1UL * this->_internal_node_size();
  for (const auto& msg : this->node_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void List::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.List)
  GOOGLE_DCHECK_NE(&from, this);
  const List* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<List>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.List)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.List)
    MergeFrom(*source);
  }
}

void List::MergeFrom(const List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.List)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_.MergeFrom(from.node_);
}

void List::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void List::CopyFrom(const List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool List::IsInitialized() const {
  return true;
}

void List::InternalSwap(List* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_.InternalSwap(&other->node_);
}

::PROTOBUF_NAMESPACE_ID::Metadata List::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoutingUpdate_RoutingEntry::InitAsDefaultInstance() {
  ::message::_RoutingUpdate_RoutingEntry_default_instance_._instance.get_mutable()->nodelist_ = const_cast< ::message::List*>(
      ::message::List::internal_default_instance());
}
class RoutingUpdate_RoutingEntry::_Internal {
 public:
  static const ::message::List& nodelist(const RoutingUpdate_RoutingEntry* msg);
};

const ::message::List&
RoutingUpdate_RoutingEntry::_Internal::nodelist(const RoutingUpdate_RoutingEntry* msg) {
  return *msg->nodelist_;
}
RoutingUpdate_RoutingEntry::RoutingUpdate_RoutingEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:message.RoutingUpdate.RoutingEntry)
}
RoutingUpdate_RoutingEntry::RoutingUpdate_RoutingEntry(const RoutingUpdate_RoutingEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nodelist()) {
    nodelist_ = new ::message::List(*from.nodelist_);
  } else {
    nodelist_ = nullptr;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:message.RoutingUpdate.RoutingEntry)
}

void RoutingUpdate_RoutingEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoutingUpdate_RoutingEntry_message_2eproto.base);
  ::memset(&nodelist_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&nodelist_)) + sizeof(index_));
}

RoutingUpdate_RoutingEntry::~RoutingUpdate_RoutingEntry() {
  // @@protoc_insertion_point(destructor:message.RoutingUpdate.RoutingEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoutingUpdate_RoutingEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete nodelist_;
}

void RoutingUpdate_RoutingEntry::ArenaDtor(void* object) {
  RoutingUpdate_RoutingEntry* _this = reinterpret_cast< RoutingUpdate_RoutingEntry* >(object);
  (void)_this;
}
void RoutingUpdate_RoutingEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutingUpdate_RoutingEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoutingUpdate_RoutingEntry& RoutingUpdate_RoutingEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoutingUpdate_RoutingEntry_message_2eproto.base);
  return *internal_default_instance();
}


void RoutingUpdate_RoutingEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:message.RoutingUpdate.RoutingEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && nodelist_ != nullptr) {
    delete nodelist_;
  }
  nodelist_ = nullptr;
  index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingUpdate_RoutingEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .message.List nodeList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodelist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingUpdate_RoutingEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.RoutingUpdate.RoutingEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // .message.List nodeList = 2;
  if (this->has_nodelist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::nodelist(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.RoutingUpdate.RoutingEntry)
  return target;
}

size_t RoutingUpdate_RoutingEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.RoutingUpdate.RoutingEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.List nodeList = 2;
  if (this->has_nodelist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodelist_);
  }

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutingUpdate_RoutingEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.RoutingUpdate.RoutingEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingUpdate_RoutingEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoutingUpdate_RoutingEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.RoutingUpdate.RoutingEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.RoutingUpdate.RoutingEntry)
    MergeFrom(*source);
  }
}

void RoutingUpdate_RoutingEntry::MergeFrom(const RoutingUpdate_RoutingEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.RoutingUpdate.RoutingEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_nodelist()) {
    _internal_mutable_nodelist()->::message::List::MergeFrom(from._internal_nodelist());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void RoutingUpdate_RoutingEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.RoutingUpdate.RoutingEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingUpdate_RoutingEntry::CopyFrom(const RoutingUpdate_RoutingEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.RoutingUpdate.RoutingEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingUpdate_RoutingEntry::IsInitialized() const {
  return true;
}

void RoutingUpdate_RoutingEntry::InternalSwap(RoutingUpdate_RoutingEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingUpdate_RoutingEntry, index_)
      + sizeof(RoutingUpdate_RoutingEntry::index_)
      - PROTOBUF_FIELD_OFFSET(RoutingUpdate_RoutingEntry, nodelist_)>(
          reinterpret_cast<char*>(&nodelist_),
          reinterpret_cast<char*>(&other->nodelist_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingUpdate_RoutingEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoutingUpdate::InitAsDefaultInstance() {
  ::message::_RoutingUpdate_default_instance_._instance.get_mutable()->leaf_ = const_cast< ::message::List*>(
      ::message::List::internal_default_instance());
  ::message::_RoutingUpdate_default_instance_._instance.get_mutable()->neighbours_ = const_cast< ::message::List*>(
      ::message::List::internal_default_instance());
}
class RoutingUpdate::_Internal {
 public:
  static const ::message::List& leaf(const RoutingUpdate* msg);
  static const ::message::List& neighbours(const RoutingUpdate* msg);
};

const ::message::List&
RoutingUpdate::_Internal::leaf(const RoutingUpdate* msg) {
  return *msg->leaf_;
}
const ::message::List&
RoutingUpdate::_Internal::neighbours(const RoutingUpdate* msg) {
  return *msg->neighbours_;
}
RoutingUpdate::RoutingUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  routingentires_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:message.RoutingUpdate)
}
RoutingUpdate::RoutingUpdate(const RoutingUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      routingentires_(from.routingentires_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_leaf()) {
    leaf_ = new ::message::List(*from.leaf_);
  } else {
    leaf_ = nullptr;
  }
  if (from._internal_has_neighbours()) {
    neighbours_ = new ::message::List(*from.neighbours_);
  } else {
    neighbours_ = nullptr;
  }
  ::memcpy(&buddy_, &from.buddy_,
    static_cast<size_t>(reinterpret_cast<char*>(&prefix_match_) -
    reinterpret_cast<char*>(&buddy_)) + sizeof(prefix_match_));
  // @@protoc_insertion_point(copy_constructor:message.RoutingUpdate)
}

void RoutingUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoutingUpdate_message_2eproto.base);
  ::memset(&leaf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prefix_match_) -
      reinterpret_cast<char*>(&leaf_)) + sizeof(prefix_match_));
}

RoutingUpdate::~RoutingUpdate() {
  // @@protoc_insertion_point(destructor:message.RoutingUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoutingUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete leaf_;
  if (this != internal_default_instance()) delete neighbours_;
}

void RoutingUpdate::ArenaDtor(void* object) {
  RoutingUpdate* _this = reinterpret_cast< RoutingUpdate* >(object);
  (void)_this;
}
void RoutingUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutingUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoutingUpdate& RoutingUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoutingUpdate_message_2eproto.base);
  return *internal_default_instance();
}


void RoutingUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:message.RoutingUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routingentires_.Clear();
  if (GetArena() == nullptr && leaf_ != nullptr) {
    delete leaf_;
  }
  leaf_ = nullptr;
  if (GetArena() == nullptr && neighbours_ != nullptr) {
    delete neighbours_;
  }
  neighbours_ = nullptr;
  ::memset(&buddy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prefix_match_) -
      reinterpret_cast<char*>(&buddy_)) + sizeof(prefix_match_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool buddy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          buddy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool terminal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          terminal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .message.List leaf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_leaf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .message.List neighbours = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_neighbours(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .message.RoutingUpdate.RoutingEntry routingEntires = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routingentires(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 prefix_match = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          prefix_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.RoutingUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool buddy = 1;
  if (this->buddy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_buddy(), target);
  }

  // bool terminal = 2;
  if (this->terminal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_terminal(), target);
  }

  // .message.List leaf = 3;
  if (this->has_leaf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::leaf(this), target, stream);
  }

  // .message.List neighbours = 4;
  if (this->has_neighbours()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::neighbours(this), target, stream);
  }

  // repeated .message.RoutingUpdate.RoutingEntry routingEntires = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_routingentires_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_routingentires(i), target, stream);
  }

  // int32 prefix_match = 6;
  if (this->prefix_match() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_prefix_match(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.RoutingUpdate)
  return target;
}

size_t RoutingUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.RoutingUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.RoutingUpdate.RoutingEntry routingEntires = 5;
  total_size += 1UL * this->_internal_routingentires_size();
  for (const auto& msg : this->routingentires_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .message.List leaf = 3;
  if (this->has_leaf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leaf_);
  }

  // .message.List neighbours = 4;
  if (this->has_neighbours()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *neighbours_);
  }

  // bool buddy = 1;
  if (this->buddy() != 0) {
    total_size += 1 + 1;
  }

  // bool terminal = 2;
  if (this->terminal() != 0) {
    total_size += 1 + 1;
  }

  // int32 prefix_match = 6;
  if (this->prefix_match() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prefix_match());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutingUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.RoutingUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoutingUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.RoutingUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.RoutingUpdate)
    MergeFrom(*source);
  }
}

void RoutingUpdate::MergeFrom(const RoutingUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.RoutingUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  routingentires_.MergeFrom(from.routingentires_);
  if (from.has_leaf()) {
    _internal_mutable_leaf()->::message::List::MergeFrom(from._internal_leaf());
  }
  if (from.has_neighbours()) {
    _internal_mutable_neighbours()->::message::List::MergeFrom(from._internal_neighbours());
  }
  if (from.buddy() != 0) {
    _internal_set_buddy(from._internal_buddy());
  }
  if (from.terminal() != 0) {
    _internal_set_terminal(from._internal_terminal());
  }
  if (from.prefix_match() != 0) {
    _internal_set_prefix_match(from._internal_prefix_match());
  }
}

void RoutingUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.RoutingUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingUpdate::CopyFrom(const RoutingUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.RoutingUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingUpdate::IsInitialized() const {
  return true;
}

void RoutingUpdate::InternalSwap(RoutingUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  routingentires_.InternalSwap(&other->routingentires_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingUpdate, prefix_match_)
      + sizeof(RoutingUpdate::prefix_match_)
      - PROTOBUF_FIELD_OFFSET(RoutingUpdate, leaf_)>(
          reinterpret_cast<char*>(&leaf_),
          reinterpret_cast<char*>(&other->leaf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AllStateUpdate::InitAsDefaultInstance() {
  ::message::_AllStateUpdate_default_instance_._instance.get_mutable()->leaf_ = const_cast< ::message::List*>(
      ::message::List::internal_default_instance());
  ::message::_AllStateUpdate_default_instance_._instance.get_mutable()->neighbours_ = const_cast< ::message::List*>(
      ::message::List::internal_default_instance());
}
class AllStateUpdate::_Internal {
 public:
  static const ::message::List& leaf(const AllStateUpdate* msg);
  static const ::message::List& neighbours(const AllStateUpdate* msg);
};

const ::message::List&
AllStateUpdate::_Internal::leaf(const AllStateUpdate* msg) {
  return *msg->leaf_;
}
const ::message::List&
AllStateUpdate::_Internal::neighbours(const AllStateUpdate* msg) {
  return *msg->neighbours_;
}
AllStateUpdate::AllStateUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  routingtable_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:message.AllStateUpdate)
}
AllStateUpdate::AllStateUpdate(const AllStateUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      routingtable_(from.routingtable_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_leaf()) {
    leaf_ = new ::message::List(*from.leaf_);
  } else {
    leaf_ = nullptr;
  }
  if (from._internal_has_neighbours()) {
    neighbours_ = new ::message::List(*from.neighbours_);
  } else {
    neighbours_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:message.AllStateUpdate)
}

void AllStateUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AllStateUpdate_message_2eproto.base);
  ::memset(&leaf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&neighbours_) -
      reinterpret_cast<char*>(&leaf_)) + sizeof(neighbours_));
}

AllStateUpdate::~AllStateUpdate() {
  // @@protoc_insertion_point(destructor:message.AllStateUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AllStateUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete leaf_;
  if (this != internal_default_instance()) delete neighbours_;
}

void AllStateUpdate::ArenaDtor(void* object) {
  AllStateUpdate* _this = reinterpret_cast< AllStateUpdate* >(object);
  (void)_this;
}
void AllStateUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllStateUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllStateUpdate& AllStateUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllStateUpdate_message_2eproto.base);
  return *internal_default_instance();
}


void AllStateUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:message.AllStateUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routingtable_.Clear();
  if (GetArena() == nullptr && leaf_ != nullptr) {
    delete leaf_;
  }
  leaf_ = nullptr;
  if (GetArena() == nullptr && neighbours_ != nullptr) {
    delete neighbours_;
  }
  neighbours_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllStateUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .message.List leaf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_leaf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .message.List routingTable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routingtable(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .message.List neighbours = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_neighbours(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllStateUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.AllStateUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.List leaf = 1;
  if (this->has_leaf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::leaf(this), target, stream);
  }

  // repeated .message.List routingTable = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_routingtable_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_routingtable(i), target, stream);
  }

  // .message.List neighbours = 3;
  if (this->has_neighbours()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::neighbours(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.AllStateUpdate)
  return target;
}

size_t AllStateUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.AllStateUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.List routingTable = 2;
  total_size += 1UL * this->_internal_routingtable_size();
  for (const auto& msg : this->routingtable_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .message.List leaf = 1;
  if (this->has_leaf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leaf_);
  }

  // .message.List neighbours = 3;
  if (this->has_neighbours()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *neighbours_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllStateUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.AllStateUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const AllStateUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllStateUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.AllStateUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.AllStateUpdate)
    MergeFrom(*source);
  }
}

void AllStateUpdate::MergeFrom(const AllStateUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.AllStateUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  routingtable_.MergeFrom(from.routingtable_);
  if (from.has_leaf()) {
    _internal_mutable_leaf()->::message::List::MergeFrom(from._internal_leaf());
  }
  if (from.has_neighbours()) {
    _internal_mutable_neighbours()->::message::List::MergeFrom(from._internal_neighbours());
  }
}

void AllStateUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.AllStateUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllStateUpdate::CopyFrom(const AllStateUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.AllStateUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllStateUpdate::IsInitialized() const {
  return true;
}

void AllStateUpdate::InternalSwap(AllStateUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  routingtable_.InternalSwap(&other->routingtable_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AllStateUpdate, neighbours_)
      + sizeof(AllStateUpdate::neighbours_)
      - PROTOBUF_FIELD_OFFSET(AllStateUpdate, leaf_)>(
          reinterpret_cast<char*>(&leaf_),
          reinterpret_cast<char*>(&other->leaf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AllStateUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetVal::InitAsDefaultInstance() {
  ::message::_GetVal_default_instance_._instance.get_mutable()->node_ = const_cast< ::message::Node*>(
      ::message::Node::internal_default_instance());
}
class GetVal::_Internal {
 public:
  static const ::message::Node& node(const GetVal* msg);
};

const ::message::Node&
GetVal::_Internal::node(const GetVal* msg) {
  return *msg->node_;
}
GetVal::GetVal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:message.GetVal)
}
GetVal::GetVal(const GetVal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  actual_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_actual_key().empty()) {
    actual_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_actual_key(),
      GetArena());
  }
  if (from._internal_has_node()) {
    node_ = new ::message::Node(*from.node_);
  } else {
    node_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:message.GetVal)
}

void GetVal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetVal_message_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actual_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_ = nullptr;
}

GetVal::~GetVal() {
  // @@protoc_insertion_point(destructor:message.GetVal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetVal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actual_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete node_;
}

void GetVal::ArenaDtor(void* object) {
  GetVal* _this = reinterpret_cast< GetVal* >(object);
  (void)_this;
}
void GetVal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetVal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetVal& GetVal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetVal_message_2eproto.base);
  return *internal_default_instance();
}


void GetVal::Clear() {
// @@protoc_insertion_point(message_clear_start:message.GetVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  actual_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetVal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "message.GetVal.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .message.Node node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string actual_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_actual_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "message.GetVal.actual_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetVal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.GetVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.GetVal.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // .message.Node node = 2;
  if (this->has_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::node(this), target, stream);
  }

  // string actual_key = 3;
  if (this->actual_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_actual_key().data(), static_cast<int>(this->_internal_actual_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.GetVal.actual_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_actual_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.GetVal)
  return target;
}

size_t GetVal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.GetVal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string actual_key = 3;
  if (this->actual_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_actual_key());
  }

  // .message.Node node = 2;
  if (this->has_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.GetVal)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetVal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.GetVal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.GetVal)
    MergeFrom(*source);
  }
}

void GetVal::MergeFrom(const GetVal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.GetVal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.actual_key().size() > 0) {
    _internal_set_actual_key(from._internal_actual_key());
  }
  if (from.has_node()) {
    _internal_mutable_node()->::message::Node::MergeFrom(from._internal_node());
  }
}

void GetVal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.GetVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVal::CopyFrom(const GetVal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.GetVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVal::IsInitialized() const {
  return true;
}

void GetVal::InternalSwap(GetVal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  actual_key_.Swap(&other->actual_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(node_, other->node_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetValResponse::InitAsDefaultInstance() {
}
class GetValResponse::_Internal {
 public:
};

GetValResponse::GetValResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:message.GetValResponse)
}
GetValResponse::GetValResponse(const GetValResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  actual_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_actual_key().empty()) {
    actual_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_actual_key(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:message.GetValResponse)
}

void GetValResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetValResponse_message_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actual_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetValResponse::~GetValResponse() {
  // @@protoc_insertion_point(destructor:message.GetValResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetValResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actual_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetValResponse::ArenaDtor(void* object) {
  GetValResponse* _this = reinterpret_cast< GetValResponse* >(object);
  (void)_this;
}
void GetValResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetValResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetValResponse& GetValResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetValResponse_message_2eproto.base);
  return *internal_default_instance();
}


void GetValResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:message.GetValResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  actual_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetValResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "message.GetValResponse.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "message.GetValResponse.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string actual_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_actual_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "message.GetValResponse.actual_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetValResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.GetValResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.GetValResponse.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.GetValResponse.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // string actual_key = 3;
  if (this->actual_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_actual_key().data(), static_cast<int>(this->_internal_actual_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.GetValResponse.actual_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_actual_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.GetValResponse)
  return target;
}

size_t GetValResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.GetValResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // string actual_key = 3;
  if (this->actual_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_actual_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetValResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.GetValResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetValResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetValResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.GetValResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.GetValResponse)
    MergeFrom(*source);
  }
}

void GetValResponse::MergeFrom(const GetValResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.GetValResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.actual_key().size() > 0) {
    _internal_set_actual_key(from._internal_actual_key());
  }
}

void GetValResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.GetValResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetValResponse::CopyFrom(const GetValResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.GetValResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetValResponse::IsInitialized() const {
  return true;
}

void GetValResponse::InternalSwap(GetValResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  actual_key_.Swap(&other->actual_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetValResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetVal::InitAsDefaultInstance() {
  ::message::_SetVal_default_instance_._instance.get_mutable()->node_ = const_cast< ::message::Node*>(
      ::message::Node::internal_default_instance());
}
class SetVal::_Internal {
 public:
  static const ::message::Node& node(const SetVal* msg);
};

const ::message::Node&
SetVal::_Internal::node(const SetVal* msg) {
  return *msg->node_;
}
SetVal::SetVal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:message.SetVal)
}
SetVal::SetVal(const SetVal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_val().empty()) {
    val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_val(),
      GetArena());
  }
  if (from._internal_has_node()) {
    node_ = new ::message::Node(*from.node_);
  } else {
    node_ = nullptr;
  }
  terminal_ = from.terminal_;
  // @@protoc_insertion_point(copy_constructor:message.SetVal)
}

void SetVal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetVal_message_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&terminal_) -
      reinterpret_cast<char*>(&node_)) + sizeof(terminal_));
}

SetVal::~SetVal() {
  // @@protoc_insertion_point(destructor:message.SetVal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetVal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  val_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete node_;
}

void SetVal::ArenaDtor(void* object) {
  SetVal* _this = reinterpret_cast< SetVal* >(object);
  (void)_this;
}
void SetVal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetVal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetVal& SetVal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetVal_message_2eproto.base);
  return *internal_default_instance();
}


void SetVal::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SetVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  val_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
  terminal_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetVal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "message.SetVal.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "message.SetVal.val"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .message.Node node = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool terminal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          terminal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetVal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SetVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.SetVal.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string val = 2;
  if (this->val().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_val().data(), static_cast<int>(this->_internal_val().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.SetVal.val");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_val(), target);
  }

  // .message.Node node = 3;
  if (this->has_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::node(this), target, stream);
  }

  // bool terminal = 4;
  if (this->terminal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_terminal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SetVal)
  return target;
}

size_t SetVal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SetVal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string val = 2;
  if (this->val().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_val());
  }

  // .message.Node node = 3;
  if (this->has_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_);
  }

  // bool terminal = 4;
  if (this->terminal() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetVal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.SetVal)
  GOOGLE_DCHECK_NE(&from, this);
  const SetVal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetVal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.SetVal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.SetVal)
    MergeFrom(*source);
  }
}

void SetVal::MergeFrom(const SetVal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.SetVal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.val().size() > 0) {
    _internal_set_val(from._internal_val());
  }
  if (from.has_node()) {
    _internal_mutable_node()->::message::Node::MergeFrom(from._internal_node());
  }
  if (from.terminal() != 0) {
    _internal_set_terminal(from._internal_terminal());
  }
}

void SetVal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.SetVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetVal::CopyFrom(const SetVal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SetVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetVal::IsInitialized() const {
  return true;
}

void SetVal::InternalSwap(SetVal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  val_.Swap(&other->val_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetVal, terminal_)
      + sizeof(SetVal::terminal_)
      - PROTOBUF_FIELD_OFFSET(SetVal, node_)>(
          reinterpret_cast<char*>(&node_),
          reinterpret_cast<char*>(&other->node_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetVal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Message::InitAsDefaultInstance() {
  ::message::_Message_default_instance_._instance.get_mutable()->sender_ = const_cast< ::message::Node*>(
      ::message::Node::internal_default_instance());
  ::message::_Message_default_instance_.joinmemsg_ = const_cast< ::message::JoinMe*>(
      ::message::JoinMe::internal_default_instance());
  ::message::_Message_default_instance_.joinmsg_ = const_cast< ::message::Join*>(
      ::message::Join::internal_default_instance());
  ::message::_Message_default_instance_.getvalmsg_ = const_cast< ::message::GetVal*>(
      ::message::GetVal::internal_default_instance());
  ::message::_Message_default_instance_.setvalmsg_ = const_cast< ::message::SetVal*>(
      ::message::SetVal::internal_default_instance());
  ::message::_Message_default_instance_.routingupdate_ = const_cast< ::message::RoutingUpdate*>(
      ::message::RoutingUpdate::internal_default_instance());
  ::message::_Message_default_instance_.allstateupdate_ = const_cast< ::message::AllStateUpdate*>(
      ::message::AllStateUpdate::internal_default_instance());
  ::message::_Message_default_instance_.getvalresponse_ = const_cast< ::message::GetValResponse*>(
      ::message::GetValResponse::internal_default_instance());
  ::message::_Message_default_instance_.deletenode_ = const_cast< ::message::DeleteNode*>(
      ::message::DeleteNode::internal_default_instance());
  ::message::_Message_default_instance_.addtohashtable_ = const_cast< ::message::AddToHashTable*>(
      ::message::AddToHashTable::internal_default_instance());
  ::message::_Message_default_instance_.responseleafset_ = const_cast< ::message::ResponseLeafSet*>(
      ::message::ResponseLeafSet::internal_default_instance());
  ::message::_Message_default_instance_.responseneighbourset_ = const_cast< ::message::ResponseNeighbourSet*>(
      ::message::ResponseNeighbourSet::internal_default_instance());
  ::message::_Message_default_instance_.requestroutingentry_ = const_cast< ::message::RequestRoutingEntry*>(
      ::message::RequestRoutingEntry::internal_default_instance());
  ::message::_Message_default_instance_.responseroutingentry_ = const_cast< ::message::ResponseRoutingEntry*>(
      ::message::ResponseRoutingEntry::internal_default_instance());
}
class Message::_Internal {
 public:
  static const ::message::Node& sender(const Message* msg);
  static const ::message::JoinMe& joinmemsg(const Message* msg);
  static const ::message::Join& joinmsg(const Message* msg);
  static const ::message::GetVal& getvalmsg(const Message* msg);
  static const ::message::SetVal& setvalmsg(const Message* msg);
  static const ::message::RoutingUpdate& routingupdate(const Message* msg);
  static const ::message::AllStateUpdate& allstateupdate(const Message* msg);
  static const ::message::GetValResponse& getvalresponse(const Message* msg);
  static const ::message::DeleteNode& deletenode(const Message* msg);
  static const ::message::AddToHashTable& addtohashtable(const Message* msg);
  static const ::message::ResponseLeafSet& responseleafset(const Message* msg);
  static const ::message::ResponseNeighbourSet& responseneighbourset(const Message* msg);
  static const ::message::RequestRoutingEntry& requestroutingentry(const Message* msg);
  static const ::message::ResponseRoutingEntry& responseroutingentry(const Message* msg);
};

const ::message::Node&
Message::_Internal::sender(const Message* msg) {
  return *msg->sender_;
}
const ::message::JoinMe&
Message::_Internal::joinmemsg(const Message* msg) {
  return *msg->msg_.joinmemsg_;
}
const ::message::Join&
Message::_Internal::joinmsg(const Message* msg) {
  return *msg->msg_.joinmsg_;
}
const ::message::GetVal&
Message::_Internal::getvalmsg(const Message* msg) {
  return *msg->msg_.getvalmsg_;
}
const ::message::SetVal&
Message::_Internal::setvalmsg(const Message* msg) {
  return *msg->msg_.setvalmsg_;
}
const ::message::RoutingUpdate&
Message::_Internal::routingupdate(const Message* msg) {
  return *msg->msg_.routingupdate_;
}
const ::message::AllStateUpdate&
Message::_Internal::allstateupdate(const Message* msg) {
  return *msg->msg_.allstateupdate_;
}
const ::message::GetValResponse&
Message::_Internal::getvalresponse(const Message* msg) {
  return *msg->msg_.getvalresponse_;
}
const ::message::DeleteNode&
Message::_Internal::deletenode(const Message* msg) {
  return *msg->msg_.deletenode_;
}
const ::message::AddToHashTable&
Message::_Internal::addtohashtable(const Message* msg) {
  return *msg->msg_.addtohashtable_;
}
const ::message::ResponseLeafSet&
Message::_Internal::responseleafset(const Message* msg) {
  return *msg->msg_.responseleafset_;
}
const ::message::ResponseNeighbourSet&
Message::_Internal::responseneighbourset(const Message* msg) {
  return *msg->msg_.responseneighbourset_;
}
const ::message::RequestRoutingEntry&
Message::_Internal::requestroutingentry(const Message* msg) {
  return *msg->msg_.requestroutingentry_;
}
const ::message::ResponseRoutingEntry&
Message::_Internal::responseroutingentry(const Message* msg) {
  return *msg->msg_.responseroutingentry_;
}
void Message::set_allocated_joinmemsg(::message::JoinMe* joinmemsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (joinmemsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(joinmemsg);
    if (message_arena != submessage_arena) {
      joinmemsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joinmemsg, submessage_arena);
    }
    set_has_joinmemsg();
    msg_.joinmemsg_ = joinmemsg;
  }
  // @@protoc_insertion_point(field_set_allocated:message.Message.joinMeMsg)
}
void Message::set_allocated_joinmsg(::message::Join* joinmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (joinmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(joinmsg);
    if (message_arena != submessage_arena) {
      joinmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joinmsg, submessage_arena);
    }
    set_has_joinmsg();
    msg_.joinmsg_ = joinmsg;
  }
  // @@protoc_insertion_point(field_set_allocated:message.Message.joinMsg)
}
void Message::set_allocated_getvalmsg(::message::GetVal* getvalmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (getvalmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getvalmsg);
    if (message_arena != submessage_arena) {
      getvalmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getvalmsg, submessage_arena);
    }
    set_has_getvalmsg();
    msg_.getvalmsg_ = getvalmsg;
  }
  // @@protoc_insertion_point(field_set_allocated:message.Message.getValMsg)
}
void Message::set_allocated_setvalmsg(::message::SetVal* setvalmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (setvalmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setvalmsg);
    if (message_arena != submessage_arena) {
      setvalmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setvalmsg, submessage_arena);
    }
    set_has_setvalmsg();
    msg_.setvalmsg_ = setvalmsg;
  }
  // @@protoc_insertion_point(field_set_allocated:message.Message.setValMsg)
}
void Message::set_allocated_routingupdate(::message::RoutingUpdate* routingupdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (routingupdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(routingupdate);
    if (message_arena != submessage_arena) {
      routingupdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routingupdate, submessage_arena);
    }
    set_has_routingupdate();
    msg_.routingupdate_ = routingupdate;
  }
  // @@protoc_insertion_point(field_set_allocated:message.Message.routingUpdate)
}
void Message::set_allocated_allstateupdate(::message::AllStateUpdate* allstateupdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (allstateupdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(allstateupdate);
    if (message_arena != submessage_arena) {
      allstateupdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allstateupdate, submessage_arena);
    }
    set_has_allstateupdate();
    msg_.allstateupdate_ = allstateupdate;
  }
  // @@protoc_insertion_point(field_set_allocated:message.Message.allStateUpdate)
}
void Message::set_allocated_getvalresponse(::message::GetValResponse* getvalresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (getvalresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getvalresponse);
    if (message_arena != submessage_arena) {
      getvalresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getvalresponse, submessage_arena);
    }
    set_has_getvalresponse();
    msg_.getvalresponse_ = getvalresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:message.Message.getValResponse)
}
void Message::set_allocated_deletenode(::message::DeleteNode* deletenode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (deletenode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deletenode);
    if (message_arena != submessage_arena) {
      deletenode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deletenode, submessage_arena);
    }
    set_has_deletenode();
    msg_.deletenode_ = deletenode;
  }
  // @@protoc_insertion_point(field_set_allocated:message.Message.deleteNode)
}
void Message::set_allocated_addtohashtable(::message::AddToHashTable* addtohashtable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (addtohashtable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(addtohashtable);
    if (message_arena != submessage_arena) {
      addtohashtable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addtohashtable, submessage_arena);
    }
    set_has_addtohashtable();
    msg_.addtohashtable_ = addtohashtable;
  }
  // @@protoc_insertion_point(field_set_allocated:message.Message.addToHashTable)
}
void Message::set_allocated_responseleafset(::message::ResponseLeafSet* responseleafset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (responseleafset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(responseleafset);
    if (message_arena != submessage_arena) {
      responseleafset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, responseleafset, submessage_arena);
    }
    set_has_responseleafset();
    msg_.responseleafset_ = responseleafset;
  }
  // @@protoc_insertion_point(field_set_allocated:message.Message.responseLeafSet)
}
void Message::set_allocated_responseneighbourset(::message::ResponseNeighbourSet* responseneighbourset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (responseneighbourset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(responseneighbourset);
    if (message_arena != submessage_arena) {
      responseneighbourset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, responseneighbourset, submessage_arena);
    }
    set_has_responseneighbourset();
    msg_.responseneighbourset_ = responseneighbourset;
  }
  // @@protoc_insertion_point(field_set_allocated:message.Message.responseNeighbourSet)
}
void Message::set_allocated_requestroutingentry(::message::RequestRoutingEntry* requestroutingentry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (requestroutingentry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(requestroutingentry);
    if (message_arena != submessage_arena) {
      requestroutingentry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestroutingentry, submessage_arena);
    }
    set_has_requestroutingentry();
    msg_.requestroutingentry_ = requestroutingentry;
  }
  // @@protoc_insertion_point(field_set_allocated:message.Message.requestRoutingEntry)
}
void Message::set_allocated_responseroutingentry(::message::ResponseRoutingEntry* responseroutingentry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (responseroutingentry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(responseroutingentry);
    if (message_arena != submessage_arena) {
      responseroutingentry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, responseroutingentry, submessage_arena);
    }
    set_has_responseroutingentry();
    msg_.responseroutingentry_ = responseroutingentry;
  }
  // @@protoc_insertion_point(field_set_allocated:message.Message.responseRoutingEntry)
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:message.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  if (from._internal_has_sender()) {
    sender_ = new ::message::Node(*from.sender_);
  } else {
    sender_ = nullptr;
  }
  clear_has_msg();
  switch (from.msg_case()) {
    case kJoinMeMsg: {
      _internal_mutable_joinmemsg()->::message::JoinMe::MergeFrom(from._internal_joinmemsg());
      break;
    }
    case kJoinMsg: {
      _internal_mutable_joinmsg()->::message::Join::MergeFrom(from._internal_joinmsg());
      break;
    }
    case kGetValMsg: {
      _internal_mutable_getvalmsg()->::message::GetVal::MergeFrom(from._internal_getvalmsg());
      break;
    }
    case kSetValMsg: {
      _internal_mutable_setvalmsg()->::message::SetVal::MergeFrom(from._internal_setvalmsg());
      break;
    }
    case kRoutingUpdate: {
      _internal_mutable_routingupdate()->::message::RoutingUpdate::MergeFrom(from._internal_routingupdate());
      break;
    }
    case kAllStateUpdate: {
      _internal_mutable_allstateupdate()->::message::AllStateUpdate::MergeFrom(from._internal_allstateupdate());
      break;
    }
    case kGetValResponse: {
      _internal_mutable_getvalresponse()->::message::GetValResponse::MergeFrom(from._internal_getvalresponse());
      break;
    }
    case kDeleteNode: {
      _internal_mutable_deletenode()->::message::DeleteNode::MergeFrom(from._internal_deletenode());
      break;
    }
    case kAddToHashTable: {
      _internal_mutable_addtohashtable()->::message::AddToHashTable::MergeFrom(from._internal_addtohashtable());
      break;
    }
    case kResponseLeafSet: {
      _internal_mutable_responseleafset()->::message::ResponseLeafSet::MergeFrom(from._internal_responseleafset());
      break;
    }
    case kResponseNeighbourSet: {
      _internal_mutable_responseneighbourset()->::message::ResponseNeighbourSet::MergeFrom(from._internal_responseneighbourset());
      break;
    }
    case kRequestRoutingEntry: {
      _internal_mutable_requestroutingentry()->::message::RequestRoutingEntry::MergeFrom(from._internal_requestroutingentry());
      break;
    }
    case kResponseRoutingEntry: {
      _internal_mutable_responseroutingentry()->::message::ResponseRoutingEntry::MergeFrom(from._internal_responseroutingentry());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:message.Message)
}

void Message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Message_message_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_ = nullptr;
  clear_has_msg();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:message.Message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sender_;
  if (has_msg()) {
    clear_msg();
  }
}

void Message::ArenaDtor(void* object) {
  Message* _this = reinterpret_cast< Message* >(object);
  (void)_this;
}
void Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message& Message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_message_2eproto.base);
  return *internal_default_instance();
}


void Message::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:message.Message)
  switch (msg_case()) {
    case kJoinMeMsg: {
      if (GetArena() == nullptr) {
        delete msg_.joinmemsg_;
      }
      break;
    }
    case kJoinMsg: {
      if (GetArena() == nullptr) {
        delete msg_.joinmsg_;
      }
      break;
    }
    case kGetValMsg: {
      if (GetArena() == nullptr) {
        delete msg_.getvalmsg_;
      }
      break;
    }
    case kSetValMsg: {
      if (GetArena() == nullptr) {
        delete msg_.setvalmsg_;
      }
      break;
    }
    case kRoutingUpdate: {
      if (GetArena() == nullptr) {
        delete msg_.routingupdate_;
      }
      break;
    }
    case kAllStateUpdate: {
      if (GetArena() == nullptr) {
        delete msg_.allstateupdate_;
      }
      break;
    }
    case kGetValResponse: {
      if (GetArena() == nullptr) {
        delete msg_.getvalresponse_;
      }
      break;
    }
    case kDeleteNode: {
      if (GetArena() == nullptr) {
        delete msg_.deletenode_;
      }
      break;
    }
    case kAddToHashTable: {
      if (GetArena() == nullptr) {
        delete msg_.addtohashtable_;
      }
      break;
    }
    case kResponseLeafSet: {
      if (GetArena() == nullptr) {
        delete msg_.responseleafset_;
      }
      break;
    }
    case kResponseNeighbourSet: {
      if (GetArena() == nullptr) {
        delete msg_.responseneighbourset_;
      }
      break;
    }
    case kRequestRoutingEntry: {
      if (GetArena() == nullptr) {
        delete msg_.requestroutingentry_;
      }
      break;
    }
    case kResponseRoutingEntry: {
      if (GetArena() == nullptr) {
        delete msg_.responseroutingentry_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:message.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "message.Message.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .message.Node sender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .message.JoinMe joinMeMsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_joinmemsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .message.Join joinMsg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_joinmsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .message.GetVal getValMsg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_getvalmsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .message.SetVal setValMsg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_setvalmsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .message.RoutingUpdate routingUpdate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_routingupdate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .message.AllStateUpdate allStateUpdate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_allstateupdate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .message.GetValResponse getValResponse = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_getvalresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .message.DeleteNode deleteNode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_deletenode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .message.AddToHashTable addToHashTable = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_addtohashtable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .message.ResponseLeafSet responseLeafSet = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_responseleafset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .message.ResponseNeighbourSet responseNeighbourSet = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_responseneighbourset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .message.RequestRoutingEntry requestRoutingEntry = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_requestroutingentry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .message.ResponseRoutingEntry responseRoutingEntry = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_responseroutingentry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.Message.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // .message.Node sender = 2;
  if (this->has_sender()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sender(this), target, stream);
  }

  // .message.JoinMe joinMeMsg = 3;
  if (_internal_has_joinmemsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::joinmemsg(this), target, stream);
  }

  // .message.Join joinMsg = 4;
  if (_internal_has_joinmsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::joinmsg(this), target, stream);
  }

  // .message.GetVal getValMsg = 5;
  if (_internal_has_getvalmsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::getvalmsg(this), target, stream);
  }

  // .message.SetVal setValMsg = 6;
  if (_internal_has_setvalmsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::setvalmsg(this), target, stream);
  }

  // .message.RoutingUpdate routingUpdate = 7;
  if (_internal_has_routingupdate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::routingupdate(this), target, stream);
  }

  // .message.AllStateUpdate allStateUpdate = 8;
  if (_internal_has_allstateupdate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::allstateupdate(this), target, stream);
  }

  // .message.GetValResponse getValResponse = 9;
  if (_internal_has_getvalresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::getvalresponse(this), target, stream);
  }

  // .message.DeleteNode deleteNode = 10;
  if (_internal_has_deletenode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::deletenode(this), target, stream);
  }

  // .message.AddToHashTable addToHashTable = 11;
  if (_internal_has_addtohashtable()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::addtohashtable(this), target, stream);
  }

  // .message.ResponseLeafSet responseLeafSet = 12;
  if (_internal_has_responseleafset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::responseleafset(this), target, stream);
  }

  // .message.ResponseNeighbourSet responseNeighbourSet = 13;
  if (_internal_has_responseneighbourset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::responseneighbourset(this), target, stream);
  }

  // .message.RequestRoutingEntry requestRoutingEntry = 14;
  if (_internal_has_requestroutingentry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::requestroutingentry(this), target, stream);
  }

  // .message.ResponseRoutingEntry responseRoutingEntry = 15;
  if (_internal_has_responseroutingentry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::responseroutingentry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // .message.Node sender = 2;
  if (this->has_sender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sender_);
  }

  switch (msg_case()) {
    // .message.JoinMe joinMeMsg = 3;
    case kJoinMeMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.joinmemsg_);
      break;
    }
    // .message.Join joinMsg = 4;
    case kJoinMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.joinmsg_);
      break;
    }
    // .message.GetVal getValMsg = 5;
    case kGetValMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.getvalmsg_);
      break;
    }
    // .message.SetVal setValMsg = 6;
    case kSetValMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.setvalmsg_);
      break;
    }
    // .message.RoutingUpdate routingUpdate = 7;
    case kRoutingUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.routingupdate_);
      break;
    }
    // .message.AllStateUpdate allStateUpdate = 8;
    case kAllStateUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.allstateupdate_);
      break;
    }
    // .message.GetValResponse getValResponse = 9;
    case kGetValResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.getvalresponse_);
      break;
    }
    // .message.DeleteNode deleteNode = 10;
    case kDeleteNode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.deletenode_);
      break;
    }
    // .message.AddToHashTable addToHashTable = 11;
    case kAddToHashTable: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.addtohashtable_);
      break;
    }
    // .message.ResponseLeafSet responseLeafSet = 12;
    case kResponseLeafSet: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.responseleafset_);
      break;
    }
    // .message.ResponseNeighbourSet responseNeighbourSet = 13;
    case kResponseNeighbourSet: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.responseneighbourset_);
      break;
    }
    // .message.RequestRoutingEntry requestRoutingEntry = 14;
    case kRequestRoutingEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.requestroutingentry_);
      break;
    }
    // .message.ResponseRoutingEntry responseRoutingEntry = 15;
    case kResponseRoutingEntry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.responseroutingentry_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.has_sender()) {
    _internal_mutable_sender()->::message::Node::MergeFrom(from._internal_sender());
  }
  switch (from.msg_case()) {
    case kJoinMeMsg: {
      _internal_mutable_joinmemsg()->::message::JoinMe::MergeFrom(from._internal_joinmemsg());
      break;
    }
    case kJoinMsg: {
      _internal_mutable_joinmsg()->::message::Join::MergeFrom(from._internal_joinmsg());
      break;
    }
    case kGetValMsg: {
      _internal_mutable_getvalmsg()->::message::GetVal::MergeFrom(from._internal_getvalmsg());
      break;
    }
    case kSetValMsg: {
      _internal_mutable_setvalmsg()->::message::SetVal::MergeFrom(from._internal_setvalmsg());
      break;
    }
    case kRoutingUpdate: {
      _internal_mutable_routingupdate()->::message::RoutingUpdate::MergeFrom(from._internal_routingupdate());
      break;
    }
    case kAllStateUpdate: {
      _internal_mutable_allstateupdate()->::message::AllStateUpdate::MergeFrom(from._internal_allstateupdate());
      break;
    }
    case kGetValResponse: {
      _internal_mutable_getvalresponse()->::message::GetValResponse::MergeFrom(from._internal_getvalresponse());
      break;
    }
    case kDeleteNode: {
      _internal_mutable_deletenode()->::message::DeleteNode::MergeFrom(from._internal_deletenode());
      break;
    }
    case kAddToHashTable: {
      _internal_mutable_addtohashtable()->::message::AddToHashTable::MergeFrom(from._internal_addtohashtable());
      break;
    }
    case kResponseLeafSet: {
      _internal_mutable_responseleafset()->::message::ResponseLeafSet::MergeFrom(from._internal_responseleafset());
      break;
    }
    case kResponseNeighbourSet: {
      _internal_mutable_responseneighbourset()->::message::ResponseNeighbourSet::MergeFrom(from._internal_responseneighbourset());
      break;
    }
    case kRequestRoutingEntry: {
      _internal_mutable_requestroutingentry()->::message::RequestRoutingEntry::MergeFrom(from._internal_requestroutingentry());
      break;
    }
    case kResponseRoutingEntry: {
      _internal_mutable_responseroutingentry()->::message::ResponseRoutingEntry::MergeFrom(from._internal_responseroutingentry());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sender_, other->sender_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Response::InitAsDefaultInstance() {
}
class Response::_Internal {
 public:
};

Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:message.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:message.Response)
}

void Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Response_message_2eproto.base);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:message.Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Response::ArenaDtor(void* object) {
  Response* _this = reinterpret_cast< Response* >(object);
  (void)_this;
}
void Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response& Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_message_2eproto.base);
  return *internal_default_instance();
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:message.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "message.Response.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.Response.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
}

void Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteNode::InitAsDefaultInstance() {
  ::message::_DeleteNode_default_instance_._instance.get_mutable()->node_ = const_cast< ::message::Node*>(
      ::message::Node::internal_default_instance());
}
class DeleteNode::_Internal {
 public:
  static const ::message::Node& node(const DeleteNode* msg);
};

const ::message::Node&
DeleteNode::_Internal::node(const DeleteNode* msg) {
  return *msg->node_;
}
DeleteNode::DeleteNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:message.DeleteNode)
}
DeleteNode::DeleteNode(const DeleteNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_node()) {
    node_ = new ::message::Node(*from.node_);
  } else {
    node_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:message.DeleteNode)
}

void DeleteNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteNode_message_2eproto.base);
  node_ = nullptr;
}

DeleteNode::~DeleteNode() {
  // @@protoc_insertion_point(destructor:message.DeleteNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteNode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete node_;
}

void DeleteNode::ArenaDtor(void* object) {
  DeleteNode* _this = reinterpret_cast< DeleteNode* >(object);
  (void)_this;
}
void DeleteNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteNode& DeleteNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteNode_message_2eproto.base);
  return *internal_default_instance();
}


void DeleteNode::Clear() {
// @@protoc_insertion_point(message_clear_start:message.DeleteNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .message.Node node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.DeleteNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.Node node = 1;
  if (this->has_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::node(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.DeleteNode)
  return target;
}

size_t DeleteNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.DeleteNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.Node node = 1;
  if (this->has_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.DeleteNode)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.DeleteNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.DeleteNode)
    MergeFrom(*source);
  }
}

void DeleteNode::MergeFrom(const DeleteNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.DeleteNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_node()) {
    _internal_mutable_node()->::message::Node::MergeFrom(from._internal_node());
  }
}

void DeleteNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.DeleteNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteNode::CopyFrom(const DeleteNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.DeleteNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteNode::IsInitialized() const {
  return true;
}

void DeleteNode::InternalSwap(DeleteNode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(node_, other->node_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AddToHashTable_HashMapEntry_DoNotUse::AddToHashTable_HashMapEntry_DoNotUse() {}
AddToHashTable_HashMapEntry_DoNotUse::AddToHashTable_HashMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AddToHashTable_HashMapEntry_DoNotUse::MergeFrom(const AddToHashTable_HashMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AddToHashTable_HashMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AddToHashTable_HashMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void AddToHashTable::InitAsDefaultInstance() {
}
class AddToHashTable::_Internal {
 public:
};

AddToHashTable::AddToHashTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hashmap_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:message.AddToHashTable)
}
AddToHashTable::AddToHashTable(const AddToHashTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hashmap_.MergeFrom(from.hashmap_);
  // @@protoc_insertion_point(copy_constructor:message.AddToHashTable)
}

void AddToHashTable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddToHashTable_message_2eproto.base);
}

AddToHashTable::~AddToHashTable() {
  // @@protoc_insertion_point(destructor:message.AddToHashTable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddToHashTable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AddToHashTable::ArenaDtor(void* object) {
  AddToHashTable* _this = reinterpret_cast< AddToHashTable* >(object);
  (void)_this;
}
void AddToHashTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddToHashTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddToHashTable& AddToHashTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddToHashTable_message_2eproto.base);
  return *internal_default_instance();
}


void AddToHashTable::Clear() {
// @@protoc_insertion_point(message_clear_start:message.AddToHashTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hashmap_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddToHashTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, string> hashMap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&hashmap_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddToHashTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.AddToHashTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> hashMap = 1;
  if (!this->_internal_hashmap().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "message.AddToHashTable.HashMapEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "message.AddToHashTable.HashMapEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_hashmap().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_hashmap().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_hashmap().begin();
          it != this->_internal_hashmap().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AddToHashTable_HashMapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_hashmap().begin();
          it != this->_internal_hashmap().end(); ++it) {
        target = AddToHashTable_HashMapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.AddToHashTable)
  return target;
}

size_t AddToHashTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.AddToHashTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> hashMap = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_hashmap_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_hashmap().begin();
      it != this->_internal_hashmap().end(); ++it) {
    total_size += AddToHashTable_HashMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddToHashTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.AddToHashTable)
  GOOGLE_DCHECK_NE(&from, this);
  const AddToHashTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddToHashTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.AddToHashTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.AddToHashTable)
    MergeFrom(*source);
  }
}

void AddToHashTable::MergeFrom(const AddToHashTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.AddToHashTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hashmap_.MergeFrom(from.hashmap_);
}

void AddToHashTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.AddToHashTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddToHashTable::CopyFrom(const AddToHashTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.AddToHashTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddToHashTable::IsInitialized() const {
  return true;
}

void AddToHashTable::InternalSwap(AddToHashTable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hashmap_.Swap(&other->hashmap_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddToHashTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShutDown::InitAsDefaultInstance() {
}
class ShutDown::_Internal {
 public:
};

ShutDown::ShutDown(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:message.ShutDown)
}
ShutDown::ShutDown(const ShutDown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message.ShutDown)
}

void ShutDown::SharedCtor() {
}

ShutDown::~ShutDown() {
  // @@protoc_insertion_point(destructor:message.ShutDown)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShutDown::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShutDown::ArenaDtor(void* object) {
  ShutDown* _this = reinterpret_cast< ShutDown* >(object);
  (void)_this;
}
void ShutDown::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShutDown::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShutDown& ShutDown::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShutDown_message_2eproto.base);
  return *internal_default_instance();
}


void ShutDown::Clear() {
// @@protoc_insertion_point(message_clear_start:message.ShutDown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShutDown::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShutDown::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.ShutDown)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.ShutDown)
  return target;
}

size_t ShutDown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.ShutDown)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShutDown::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.ShutDown)
  GOOGLE_DCHECK_NE(&from, this);
  const ShutDown* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShutDown>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.ShutDown)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.ShutDown)
    MergeFrom(*source);
  }
}

void ShutDown::MergeFrom(const ShutDown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.ShutDown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ShutDown::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.ShutDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutDown::CopyFrom(const ShutDown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.ShutDown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutDown::IsInitialized() const {
  return true;
}

void ShutDown::InternalSwap(ShutDown* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShutDown::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResponseLeafSet::InitAsDefaultInstance() {
  ::message::_ResponseLeafSet_default_instance_._instance.get_mutable()->leaf_ = const_cast< ::message::List*>(
      ::message::List::internal_default_instance());
}
class ResponseLeafSet::_Internal {
 public:
  static const ::message::List& leaf(const ResponseLeafSet* msg);
};

const ::message::List&
ResponseLeafSet::_Internal::leaf(const ResponseLeafSet* msg) {
  return *msg->leaf_;
}
ResponseLeafSet::ResponseLeafSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:message.ResponseLeafSet)
}
ResponseLeafSet::ResponseLeafSet(const ResponseLeafSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_leaf()) {
    leaf_ = new ::message::List(*from.leaf_);
  } else {
    leaf_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:message.ResponseLeafSet)
}

void ResponseLeafSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResponseLeafSet_message_2eproto.base);
  leaf_ = nullptr;
}

ResponseLeafSet::~ResponseLeafSet() {
  // @@protoc_insertion_point(destructor:message.ResponseLeafSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponseLeafSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete leaf_;
}

void ResponseLeafSet::ArenaDtor(void* object) {
  ResponseLeafSet* _this = reinterpret_cast< ResponseLeafSet* >(object);
  (void)_this;
}
void ResponseLeafSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseLeafSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseLeafSet& ResponseLeafSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponseLeafSet_message_2eproto.base);
  return *internal_default_instance();
}


void ResponseLeafSet::Clear() {
// @@protoc_insertion_point(message_clear_start:message.ResponseLeafSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && leaf_ != nullptr) {
    delete leaf_;
  }
  leaf_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseLeafSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .message.List leaf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_leaf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseLeafSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.ResponseLeafSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.List leaf = 1;
  if (this->has_leaf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::leaf(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.ResponseLeafSet)
  return target;
}

size_t ResponseLeafSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.ResponseLeafSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.List leaf = 1;
  if (this->has_leaf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *leaf_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseLeafSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.ResponseLeafSet)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseLeafSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseLeafSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.ResponseLeafSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.ResponseLeafSet)
    MergeFrom(*source);
  }
}

void ResponseLeafSet::MergeFrom(const ResponseLeafSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.ResponseLeafSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_leaf()) {
    _internal_mutable_leaf()->::message::List::MergeFrom(from._internal_leaf());
  }
}

void ResponseLeafSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.ResponseLeafSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseLeafSet::CopyFrom(const ResponseLeafSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.ResponseLeafSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseLeafSet::IsInitialized() const {
  return true;
}

void ResponseLeafSet::InternalSwap(ResponseLeafSet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(leaf_, other->leaf_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseLeafSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResponseNeighbourSet::InitAsDefaultInstance() {
  ::message::_ResponseNeighbourSet_default_instance_._instance.get_mutable()->neighbours_ = const_cast< ::message::List*>(
      ::message::List::internal_default_instance());
}
class ResponseNeighbourSet::_Internal {
 public:
  static const ::message::List& neighbours(const ResponseNeighbourSet* msg);
};

const ::message::List&
ResponseNeighbourSet::_Internal::neighbours(const ResponseNeighbourSet* msg) {
  return *msg->neighbours_;
}
ResponseNeighbourSet::ResponseNeighbourSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:message.ResponseNeighbourSet)
}
ResponseNeighbourSet::ResponseNeighbourSet(const ResponseNeighbourSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_neighbours()) {
    neighbours_ = new ::message::List(*from.neighbours_);
  } else {
    neighbours_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:message.ResponseNeighbourSet)
}

void ResponseNeighbourSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResponseNeighbourSet_message_2eproto.base);
  neighbours_ = nullptr;
}

ResponseNeighbourSet::~ResponseNeighbourSet() {
  // @@protoc_insertion_point(destructor:message.ResponseNeighbourSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponseNeighbourSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete neighbours_;
}

void ResponseNeighbourSet::ArenaDtor(void* object) {
  ResponseNeighbourSet* _this = reinterpret_cast< ResponseNeighbourSet* >(object);
  (void)_this;
}
void ResponseNeighbourSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseNeighbourSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseNeighbourSet& ResponseNeighbourSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponseNeighbourSet_message_2eproto.base);
  return *internal_default_instance();
}


void ResponseNeighbourSet::Clear() {
// @@protoc_insertion_point(message_clear_start:message.ResponseNeighbourSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && neighbours_ != nullptr) {
    delete neighbours_;
  }
  neighbours_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseNeighbourSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .message.List neighbours = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_neighbours(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseNeighbourSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.ResponseNeighbourSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.List neighbours = 1;
  if (this->has_neighbours()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::neighbours(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.ResponseNeighbourSet)
  return target;
}

size_t ResponseNeighbourSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.ResponseNeighbourSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.List neighbours = 1;
  if (this->has_neighbours()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *neighbours_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseNeighbourSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.ResponseNeighbourSet)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseNeighbourSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseNeighbourSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.ResponseNeighbourSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.ResponseNeighbourSet)
    MergeFrom(*source);
  }
}

void ResponseNeighbourSet::MergeFrom(const ResponseNeighbourSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.ResponseNeighbourSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_neighbours()) {
    _internal_mutable_neighbours()->::message::List::MergeFrom(from._internal_neighbours());
  }
}

void ResponseNeighbourSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.ResponseNeighbourSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseNeighbourSet::CopyFrom(const ResponseNeighbourSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.ResponseNeighbourSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseNeighbourSet::IsInitialized() const {
  return true;
}

void ResponseNeighbourSet::InternalSwap(ResponseNeighbourSet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(neighbours_, other->neighbours_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseNeighbourSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResponseRoutingEntry::InitAsDefaultInstance() {
  ::message::_ResponseRoutingEntry_default_instance_._instance.get_mutable()->routingentry_ = const_cast< ::message::List*>(
      ::message::List::internal_default_instance());
}
class ResponseRoutingEntry::_Internal {
 public:
  static const ::message::List& routingentry(const ResponseRoutingEntry* msg);
};

const ::message::List&
ResponseRoutingEntry::_Internal::routingentry(const ResponseRoutingEntry* msg) {
  return *msg->routingentry_;
}
ResponseRoutingEntry::ResponseRoutingEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:message.ResponseRoutingEntry)
}
ResponseRoutingEntry::ResponseRoutingEntry(const ResponseRoutingEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_routingentry()) {
    routingentry_ = new ::message::List(*from.routingentry_);
  } else {
    routingentry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:message.ResponseRoutingEntry)
}

void ResponseRoutingEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResponseRoutingEntry_message_2eproto.base);
  routingentry_ = nullptr;
}

ResponseRoutingEntry::~ResponseRoutingEntry() {
  // @@protoc_insertion_point(destructor:message.ResponseRoutingEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponseRoutingEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete routingentry_;
}

void ResponseRoutingEntry::ArenaDtor(void* object) {
  ResponseRoutingEntry* _this = reinterpret_cast< ResponseRoutingEntry* >(object);
  (void)_this;
}
void ResponseRoutingEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseRoutingEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseRoutingEntry& ResponseRoutingEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponseRoutingEntry_message_2eproto.base);
  return *internal_default_instance();
}


void ResponseRoutingEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:message.ResponseRoutingEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && routingentry_ != nullptr) {
    delete routingentry_;
  }
  routingentry_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseRoutingEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .message.List routingEntry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_routingentry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseRoutingEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.ResponseRoutingEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .message.List routingEntry = 1;
  if (this->has_routingentry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::routingentry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.ResponseRoutingEntry)
  return target;
}

size_t ResponseRoutingEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.ResponseRoutingEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .message.List routingEntry = 1;
  if (this->has_routingentry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *routingentry_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseRoutingEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.ResponseRoutingEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseRoutingEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseRoutingEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.ResponseRoutingEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.ResponseRoutingEntry)
    MergeFrom(*source);
  }
}

void ResponseRoutingEntry::MergeFrom(const ResponseRoutingEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.ResponseRoutingEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_routingentry()) {
    _internal_mutable_routingentry()->::message::List::MergeFrom(from._internal_routingentry());
  }
}

void ResponseRoutingEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.ResponseRoutingEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseRoutingEntry::CopyFrom(const ResponseRoutingEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.ResponseRoutingEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseRoutingEntry::IsInitialized() const {
  return true;
}

void ResponseRoutingEntry::InternalSwap(ResponseRoutingEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(routingentry_, other->routingentry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseRoutingEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestRoutingEntry::InitAsDefaultInstance() {
}
class RequestRoutingEntry::_Internal {
 public:
};

RequestRoutingEntry::RequestRoutingEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:message.RequestRoutingEntry)
}
RequestRoutingEntry::RequestRoutingEntry(const RequestRoutingEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:message.RequestRoutingEntry)
}

void RequestRoutingEntry::SharedCtor() {
  index_ = 0;
}

RequestRoutingEntry::~RequestRoutingEntry() {
  // @@protoc_insertion_point(destructor:message.RequestRoutingEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestRoutingEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RequestRoutingEntry::ArenaDtor(void* object) {
  RequestRoutingEntry* _this = reinterpret_cast< RequestRoutingEntry* >(object);
  (void)_this;
}
void RequestRoutingEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestRoutingEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestRoutingEntry& RequestRoutingEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestRoutingEntry_message_2eproto.base);
  return *internal_default_instance();
}


void RequestRoutingEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:message.RequestRoutingEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestRoutingEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestRoutingEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.RequestRoutingEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.RequestRoutingEntry)
  return target;
}

size_t RequestRoutingEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.RequestRoutingEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestRoutingEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.RequestRoutingEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestRoutingEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestRoutingEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.RequestRoutingEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.RequestRoutingEntry)
    MergeFrom(*source);
  }
}

void RequestRoutingEntry::MergeFrom(const RequestRoutingEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.RequestRoutingEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void RequestRoutingEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.RequestRoutingEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRoutingEntry::CopyFrom(const RequestRoutingEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.RequestRoutingEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRoutingEntry::IsInitialized() const {
  return true;
}

void RequestRoutingEntry::InternalSwap(RequestRoutingEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestRoutingEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::message::JoinMe* Arena::CreateMaybeMessage< ::message::JoinMe >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::JoinMe >(arena);
}
template<> PROTOBUF_NOINLINE ::message::Join* Arena::CreateMaybeMessage< ::message::Join >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::Join >(arena);
}
template<> PROTOBUF_NOINLINE ::message::Node* Arena::CreateMaybeMessage< ::message::Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::message::List* Arena::CreateMaybeMessage< ::message::List >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::List >(arena);
}
template<> PROTOBUF_NOINLINE ::message::RoutingUpdate_RoutingEntry* Arena::CreateMaybeMessage< ::message::RoutingUpdate_RoutingEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::RoutingUpdate_RoutingEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::message::RoutingUpdate* Arena::CreateMaybeMessage< ::message::RoutingUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::RoutingUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::message::AllStateUpdate* Arena::CreateMaybeMessage< ::message::AllStateUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::AllStateUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::message::GetVal* Arena::CreateMaybeMessage< ::message::GetVal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::GetVal >(arena);
}
template<> PROTOBUF_NOINLINE ::message::GetValResponse* Arena::CreateMaybeMessage< ::message::GetValResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::GetValResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SetVal* Arena::CreateMaybeMessage< ::message::SetVal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::SetVal >(arena);
}
template<> PROTOBUF_NOINLINE ::message::Message* Arena::CreateMaybeMessage< ::message::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::message::Response* Arena::CreateMaybeMessage< ::message::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::message::DeleteNode* Arena::CreateMaybeMessage< ::message::DeleteNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::DeleteNode >(arena);
}
template<> PROTOBUF_NOINLINE ::message::AddToHashTable_HashMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::message::AddToHashTable_HashMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::AddToHashTable_HashMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::message::AddToHashTable* Arena::CreateMaybeMessage< ::message::AddToHashTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::AddToHashTable >(arena);
}
template<> PROTOBUF_NOINLINE ::message::ShutDown* Arena::CreateMaybeMessage< ::message::ShutDown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::ShutDown >(arena);
}
template<> PROTOBUF_NOINLINE ::message::ResponseLeafSet* Arena::CreateMaybeMessage< ::message::ResponseLeafSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::ResponseLeafSet >(arena);
}
template<> PROTOBUF_NOINLINE ::message::ResponseNeighbourSet* Arena::CreateMaybeMessage< ::message::ResponseNeighbourSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::ResponseNeighbourSet >(arena);
}
template<> PROTOBUF_NOINLINE ::message::ResponseRoutingEntry* Arena::CreateMaybeMessage< ::message::ResponseRoutingEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::ResponseRoutingEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::message::RequestRoutingEntry* Arena::CreateMaybeMessage< ::message::RequestRoutingEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::RequestRoutingEntry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
