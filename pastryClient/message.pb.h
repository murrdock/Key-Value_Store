// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace message {
class AddToHashTable;
class AddToHashTableDefaultTypeInternal;
extern AddToHashTableDefaultTypeInternal _AddToHashTable_default_instance_;
class AddToHashTable_HashMapEntry_DoNotUse;
class AddToHashTable_HashMapEntry_DoNotUseDefaultTypeInternal;
extern AddToHashTable_HashMapEntry_DoNotUseDefaultTypeInternal _AddToHashTable_HashMapEntry_DoNotUse_default_instance_;
class AllStateUpdate;
class AllStateUpdateDefaultTypeInternal;
extern AllStateUpdateDefaultTypeInternal _AllStateUpdate_default_instance_;
class DeleteNode;
class DeleteNodeDefaultTypeInternal;
extern DeleteNodeDefaultTypeInternal _DeleteNode_default_instance_;
class GetVal;
class GetValDefaultTypeInternal;
extern GetValDefaultTypeInternal _GetVal_default_instance_;
class GetValResponse;
class GetValResponseDefaultTypeInternal;
extern GetValResponseDefaultTypeInternal _GetValResponse_default_instance_;
class Join;
class JoinDefaultTypeInternal;
extern JoinDefaultTypeInternal _Join_default_instance_;
class JoinMe;
class JoinMeDefaultTypeInternal;
extern JoinMeDefaultTypeInternal _JoinMe_default_instance_;
class List;
class ListDefaultTypeInternal;
extern ListDefaultTypeInternal _List_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class RequestRoutingEntry;
class RequestRoutingEntryDefaultTypeInternal;
extern RequestRoutingEntryDefaultTypeInternal _RequestRoutingEntry_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class ResponseLeafSet;
class ResponseLeafSetDefaultTypeInternal;
extern ResponseLeafSetDefaultTypeInternal _ResponseLeafSet_default_instance_;
class ResponseNeighbourSet;
class ResponseNeighbourSetDefaultTypeInternal;
extern ResponseNeighbourSetDefaultTypeInternal _ResponseNeighbourSet_default_instance_;
class ResponseRoutingEntry;
class ResponseRoutingEntryDefaultTypeInternal;
extern ResponseRoutingEntryDefaultTypeInternal _ResponseRoutingEntry_default_instance_;
class RoutingUpdate;
class RoutingUpdateDefaultTypeInternal;
extern RoutingUpdateDefaultTypeInternal _RoutingUpdate_default_instance_;
class RoutingUpdate_RoutingEntry;
class RoutingUpdate_RoutingEntryDefaultTypeInternal;
extern RoutingUpdate_RoutingEntryDefaultTypeInternal _RoutingUpdate_RoutingEntry_default_instance_;
class SetVal;
class SetValDefaultTypeInternal;
extern SetValDefaultTypeInternal _SetVal_default_instance_;
class ShutDown;
class ShutDownDefaultTypeInternal;
extern ShutDownDefaultTypeInternal _ShutDown_default_instance_;
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> ::message::AddToHashTable* Arena::CreateMaybeMessage<::message::AddToHashTable>(Arena*);
template<> ::message::AddToHashTable_HashMapEntry_DoNotUse* Arena::CreateMaybeMessage<::message::AddToHashTable_HashMapEntry_DoNotUse>(Arena*);
template<> ::message::AllStateUpdate* Arena::CreateMaybeMessage<::message::AllStateUpdate>(Arena*);
template<> ::message::DeleteNode* Arena::CreateMaybeMessage<::message::DeleteNode>(Arena*);
template<> ::message::GetVal* Arena::CreateMaybeMessage<::message::GetVal>(Arena*);
template<> ::message::GetValResponse* Arena::CreateMaybeMessage<::message::GetValResponse>(Arena*);
template<> ::message::Join* Arena::CreateMaybeMessage<::message::Join>(Arena*);
template<> ::message::JoinMe* Arena::CreateMaybeMessage<::message::JoinMe>(Arena*);
template<> ::message::List* Arena::CreateMaybeMessage<::message::List>(Arena*);
template<> ::message::Message* Arena::CreateMaybeMessage<::message::Message>(Arena*);
template<> ::message::Node* Arena::CreateMaybeMessage<::message::Node>(Arena*);
template<> ::message::RequestRoutingEntry* Arena::CreateMaybeMessage<::message::RequestRoutingEntry>(Arena*);
template<> ::message::Response* Arena::CreateMaybeMessage<::message::Response>(Arena*);
template<> ::message::ResponseLeafSet* Arena::CreateMaybeMessage<::message::ResponseLeafSet>(Arena*);
template<> ::message::ResponseNeighbourSet* Arena::CreateMaybeMessage<::message::ResponseNeighbourSet>(Arena*);
template<> ::message::ResponseRoutingEntry* Arena::CreateMaybeMessage<::message::ResponseRoutingEntry>(Arena*);
template<> ::message::RoutingUpdate* Arena::CreateMaybeMessage<::message::RoutingUpdate>(Arena*);
template<> ::message::RoutingUpdate_RoutingEntry* Arena::CreateMaybeMessage<::message::RoutingUpdate_RoutingEntry>(Arena*);
template<> ::message::SetVal* Arena::CreateMaybeMessage<::message::SetVal>(Arena*);
template<> ::message::ShutDown* Arena::CreateMaybeMessage<::message::ShutDown>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace message {

// ===================================================================

class JoinMe PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.JoinMe) */ {
 public:
  inline JoinMe() : JoinMe(nullptr) {}
  virtual ~JoinMe();

  JoinMe(const JoinMe& from);
  JoinMe(JoinMe&& from) noexcept
    : JoinMe() {
    *this = ::std::move(from);
  }

  inline JoinMe& operator=(const JoinMe& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinMe& operator=(JoinMe&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinMe& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinMe* internal_default_instance() {
    return reinterpret_cast<const JoinMe*>(
               &_JoinMe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(JoinMe& a, JoinMe& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinMe* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinMe* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinMe* New() const final {
    return CreateMaybeMessage<JoinMe>(nullptr);
  }

  JoinMe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinMe>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinMe& from);
  void MergeFrom(const JoinMe& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinMe* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.JoinMe";
  }
  protected:
  explicit JoinMe(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIDFieldNumber = 1,
    kIPFieldNumber = 2,
    kPortFieldNumber = 3,
  };
  // string nodeID = 1;
  void clear_nodeid();
  const std::string& nodeid() const;
  void set_nodeid(const std::string& value);
  void set_nodeid(std::string&& value);
  void set_nodeid(const char* value);
  void set_nodeid(const char* value, size_t size);
  std::string* mutable_nodeid();
  std::string* release_nodeid();
  void set_allocated_nodeid(std::string* nodeid);
  private:
  const std::string& _internal_nodeid() const;
  void _internal_set_nodeid(const std::string& value);
  std::string* _internal_mutable_nodeid();
  public:

  // string IP = 2;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string port = 3;
  void clear_port();
  const std::string& port() const;
  void set_port(const std::string& value);
  void set_port(std::string&& value);
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  std::string* mutable_port();
  std::string* release_port();
  void set_allocated_port(std::string* port);
  private:
  const std::string& _internal_port() const;
  void _internal_set_port(const std::string& value);
  std::string* _internal_mutable_port();
  public:

  // @@protoc_insertion_point(class_scope:message.JoinMe)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodeid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Join PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.Join) */ {
 public:
  inline Join() : Join(nullptr) {}
  virtual ~Join();

  Join(const Join& from);
  Join(Join&& from) noexcept
    : Join() {
    *this = ::std::move(from);
  }

  inline Join& operator=(const Join& from) {
    CopyFrom(from);
    return *this;
  }
  inline Join& operator=(Join&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Join& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Join* internal_default_instance() {
    return reinterpret_cast<const Join*>(
               &_Join_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Join& a, Join& b) {
    a.Swap(&b);
  }
  inline void Swap(Join* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Join* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Join* New() const final {
    return CreateMaybeMessage<Join>(nullptr);
  }

  Join* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Join>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Join& from);
  void MergeFrom(const Join& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Join* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.Join";
  }
  protected:
  explicit Join(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIDFieldNumber = 1,
    kIPFieldNumber = 2,
    kPortFieldNumber = 3,
    kRowIndexFieldNumber = 4,
  };
  // string nodeID = 1;
  void clear_nodeid();
  const std::string& nodeid() const;
  void set_nodeid(const std::string& value);
  void set_nodeid(std::string&& value);
  void set_nodeid(const char* value);
  void set_nodeid(const char* value, size_t size);
  std::string* mutable_nodeid();
  std::string* release_nodeid();
  void set_allocated_nodeid(std::string* nodeid);
  private:
  const std::string& _internal_nodeid() const;
  void _internal_set_nodeid(const std::string& value);
  std::string* _internal_mutable_nodeid();
  public:

  // string IP = 2;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string port = 3;
  void clear_port();
  const std::string& port() const;
  void set_port(const std::string& value);
  void set_port(std::string&& value);
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  std::string* mutable_port();
  std::string* release_port();
  void set_allocated_port(std::string* port);
  private:
  const std::string& _internal_port() const;
  void _internal_set_port(const std::string& value);
  std::string* _internal_mutable_port();
  public:

  // int32 row_index = 4;
  void clear_row_index();
  ::PROTOBUF_NAMESPACE_ID::int32 row_index() const;
  void set_row_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_row_index() const;
  void _internal_set_row_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:message.Join)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodeid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_;
  ::PROTOBUF_NAMESPACE_ID::int32 row_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Node PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.Node) */ {
 public:
  inline Node() : Node(nullptr) {}
  virtual ~Node();

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Node& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const final {
    return CreateMaybeMessage<Node>(nullptr);
  }

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.Node";
  }
  protected:
  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIDFieldNumber = 1,
    kIPFieldNumber = 2,
    kPortFieldNumber = 3,
  };
  // string nodeID = 1;
  void clear_nodeid();
  const std::string& nodeid() const;
  void set_nodeid(const std::string& value);
  void set_nodeid(std::string&& value);
  void set_nodeid(const char* value);
  void set_nodeid(const char* value, size_t size);
  std::string* mutable_nodeid();
  std::string* release_nodeid();
  void set_allocated_nodeid(std::string* nodeid);
  private:
  const std::string& _internal_nodeid() const;
  void _internal_set_nodeid(const std::string& value);
  std::string* _internal_mutable_nodeid();
  public:

  // string IP = 2;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string port = 3;
  void clear_port();
  const std::string& port() const;
  void set_port(const std::string& value);
  void set_port(std::string&& value);
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  std::string* mutable_port();
  std::string* release_port();
  void set_allocated_port(std::string* port);
  private:
  const std::string& _internal_port() const;
  void _internal_set_port(const std::string& value);
  std::string* _internal_mutable_port();
  public:

  // @@protoc_insertion_point(class_scope:message.Node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodeid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class List PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.List) */ {
 public:
  inline List() : List(nullptr) {}
  virtual ~List();

  List(const List& from);
  List(List&& from) noexcept
    : List() {
    *this = ::std::move(from);
  }

  inline List& operator=(const List& from) {
    CopyFrom(from);
    return *this;
  }
  inline List& operator=(List&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const List& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const List* internal_default_instance() {
    return reinterpret_cast<const List*>(
               &_List_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(List& a, List& b) {
    a.Swap(&b);
  }
  inline void Swap(List* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(List* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline List* New() const final {
    return CreateMaybeMessage<List>(nullptr);
  }

  List* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<List>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const List& from);
  void MergeFrom(const List& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(List* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.List";
  }
  protected:
  explicit List(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
  };
  // repeated .message.Node node = 1;
  int node_size() const;
  private:
  int _internal_node_size() const;
  public:
  void clear_node();
  ::message::Node* mutable_node(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::Node >*
      mutable_node();
  private:
  const ::message::Node& _internal_node(int index) const;
  ::message::Node* _internal_add_node();
  public:
  const ::message::Node& node(int index) const;
  ::message::Node* add_node();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::Node >&
      node() const;

  // @@protoc_insertion_point(class_scope:message.List)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::Node > node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RoutingUpdate_RoutingEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.RoutingUpdate.RoutingEntry) */ {
 public:
  inline RoutingUpdate_RoutingEntry() : RoutingUpdate_RoutingEntry(nullptr) {}
  virtual ~RoutingUpdate_RoutingEntry();

  RoutingUpdate_RoutingEntry(const RoutingUpdate_RoutingEntry& from);
  RoutingUpdate_RoutingEntry(RoutingUpdate_RoutingEntry&& from) noexcept
    : RoutingUpdate_RoutingEntry() {
    *this = ::std::move(from);
  }

  inline RoutingUpdate_RoutingEntry& operator=(const RoutingUpdate_RoutingEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingUpdate_RoutingEntry& operator=(RoutingUpdate_RoutingEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoutingUpdate_RoutingEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoutingUpdate_RoutingEntry* internal_default_instance() {
    return reinterpret_cast<const RoutingUpdate_RoutingEntry*>(
               &_RoutingUpdate_RoutingEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RoutingUpdate_RoutingEntry& a, RoutingUpdate_RoutingEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingUpdate_RoutingEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutingUpdate_RoutingEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoutingUpdate_RoutingEntry* New() const final {
    return CreateMaybeMessage<RoutingUpdate_RoutingEntry>(nullptr);
  }

  RoutingUpdate_RoutingEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoutingUpdate_RoutingEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoutingUpdate_RoutingEntry& from);
  void MergeFrom(const RoutingUpdate_RoutingEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingUpdate_RoutingEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.RoutingUpdate.RoutingEntry";
  }
  protected:
  explicit RoutingUpdate_RoutingEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeListFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // .message.List nodeList = 2;
  bool has_nodelist() const;
  private:
  bool _internal_has_nodelist() const;
  public:
  void clear_nodelist();
  const ::message::List& nodelist() const;
  ::message::List* release_nodelist();
  ::message::List* mutable_nodelist();
  void set_allocated_nodelist(::message::List* nodelist);
  private:
  const ::message::List& _internal_nodelist() const;
  ::message::List* _internal_mutable_nodelist();
  public:
  void unsafe_arena_set_allocated_nodelist(
      ::message::List* nodelist);
  ::message::List* unsafe_arena_release_nodelist();

  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:message.RoutingUpdate.RoutingEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::message::List* nodelist_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RoutingUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.RoutingUpdate) */ {
 public:
  inline RoutingUpdate() : RoutingUpdate(nullptr) {}
  virtual ~RoutingUpdate();

  RoutingUpdate(const RoutingUpdate& from);
  RoutingUpdate(RoutingUpdate&& from) noexcept
    : RoutingUpdate() {
    *this = ::std::move(from);
  }

  inline RoutingUpdate& operator=(const RoutingUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingUpdate& operator=(RoutingUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoutingUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoutingUpdate* internal_default_instance() {
    return reinterpret_cast<const RoutingUpdate*>(
               &_RoutingUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RoutingUpdate& a, RoutingUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutingUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoutingUpdate* New() const final {
    return CreateMaybeMessage<RoutingUpdate>(nullptr);
  }

  RoutingUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoutingUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoutingUpdate& from);
  void MergeFrom(const RoutingUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.RoutingUpdate";
  }
  protected:
  explicit RoutingUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RoutingUpdate_RoutingEntry RoutingEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kRoutingEntiresFieldNumber = 5,
    kLeafFieldNumber = 3,
    kNeighboursFieldNumber = 4,
    kBuddyFieldNumber = 1,
    kTerminalFieldNumber = 2,
    kPrefixMatchFieldNumber = 6,
  };
  // repeated .message.RoutingUpdate.RoutingEntry routingEntires = 5;
  int routingentires_size() const;
  private:
  int _internal_routingentires_size() const;
  public:
  void clear_routingentires();
  ::message::RoutingUpdate_RoutingEntry* mutable_routingentires(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::RoutingUpdate_RoutingEntry >*
      mutable_routingentires();
  private:
  const ::message::RoutingUpdate_RoutingEntry& _internal_routingentires(int index) const;
  ::message::RoutingUpdate_RoutingEntry* _internal_add_routingentires();
  public:
  const ::message::RoutingUpdate_RoutingEntry& routingentires(int index) const;
  ::message::RoutingUpdate_RoutingEntry* add_routingentires();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::RoutingUpdate_RoutingEntry >&
      routingentires() const;

  // .message.List leaf = 3;
  bool has_leaf() const;
  private:
  bool _internal_has_leaf() const;
  public:
  void clear_leaf();
  const ::message::List& leaf() const;
  ::message::List* release_leaf();
  ::message::List* mutable_leaf();
  void set_allocated_leaf(::message::List* leaf);
  private:
  const ::message::List& _internal_leaf() const;
  ::message::List* _internal_mutable_leaf();
  public:
  void unsafe_arena_set_allocated_leaf(
      ::message::List* leaf);
  ::message::List* unsafe_arena_release_leaf();

  // .message.List neighbours = 4;
  bool has_neighbours() const;
  private:
  bool _internal_has_neighbours() const;
  public:
  void clear_neighbours();
  const ::message::List& neighbours() const;
  ::message::List* release_neighbours();
  ::message::List* mutable_neighbours();
  void set_allocated_neighbours(::message::List* neighbours);
  private:
  const ::message::List& _internal_neighbours() const;
  ::message::List* _internal_mutable_neighbours();
  public:
  void unsafe_arena_set_allocated_neighbours(
      ::message::List* neighbours);
  ::message::List* unsafe_arena_release_neighbours();

  // bool buddy = 1;
  void clear_buddy();
  bool buddy() const;
  void set_buddy(bool value);
  private:
  bool _internal_buddy() const;
  void _internal_set_buddy(bool value);
  public:

  // bool terminal = 2;
  void clear_terminal();
  bool terminal() const;
  void set_terminal(bool value);
  private:
  bool _internal_terminal() const;
  void _internal_set_terminal(bool value);
  public:

  // int32 prefix_match = 6;
  void clear_prefix_match();
  ::PROTOBUF_NAMESPACE_ID::int32 prefix_match() const;
  void set_prefix_match(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prefix_match() const;
  void _internal_set_prefix_match(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:message.RoutingUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::RoutingUpdate_RoutingEntry > routingentires_;
  ::message::List* leaf_;
  ::message::List* neighbours_;
  bool buddy_;
  bool terminal_;
  ::PROTOBUF_NAMESPACE_ID::int32 prefix_match_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class AllStateUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.AllStateUpdate) */ {
 public:
  inline AllStateUpdate() : AllStateUpdate(nullptr) {}
  virtual ~AllStateUpdate();

  AllStateUpdate(const AllStateUpdate& from);
  AllStateUpdate(AllStateUpdate&& from) noexcept
    : AllStateUpdate() {
    *this = ::std::move(from);
  }

  inline AllStateUpdate& operator=(const AllStateUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllStateUpdate& operator=(AllStateUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AllStateUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllStateUpdate* internal_default_instance() {
    return reinterpret_cast<const AllStateUpdate*>(
               &_AllStateUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AllStateUpdate& a, AllStateUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(AllStateUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllStateUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllStateUpdate* New() const final {
    return CreateMaybeMessage<AllStateUpdate>(nullptr);
  }

  AllStateUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllStateUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AllStateUpdate& from);
  void MergeFrom(const AllStateUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllStateUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.AllStateUpdate";
  }
  protected:
  explicit AllStateUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutingTableFieldNumber = 2,
    kLeafFieldNumber = 1,
    kNeighboursFieldNumber = 3,
  };
  // repeated .message.List routingTable = 2;
  int routingtable_size() const;
  private:
  int _internal_routingtable_size() const;
  public:
  void clear_routingtable();
  ::message::List* mutable_routingtable(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::List >*
      mutable_routingtable();
  private:
  const ::message::List& _internal_routingtable(int index) const;
  ::message::List* _internal_add_routingtable();
  public:
  const ::message::List& routingtable(int index) const;
  ::message::List* add_routingtable();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::List >&
      routingtable() const;

  // .message.List leaf = 1;
  bool has_leaf() const;
  private:
  bool _internal_has_leaf() const;
  public:
  void clear_leaf();
  const ::message::List& leaf() const;
  ::message::List* release_leaf();
  ::message::List* mutable_leaf();
  void set_allocated_leaf(::message::List* leaf);
  private:
  const ::message::List& _internal_leaf() const;
  ::message::List* _internal_mutable_leaf();
  public:
  void unsafe_arena_set_allocated_leaf(
      ::message::List* leaf);
  ::message::List* unsafe_arena_release_leaf();

  // .message.List neighbours = 3;
  bool has_neighbours() const;
  private:
  bool _internal_has_neighbours() const;
  public:
  void clear_neighbours();
  const ::message::List& neighbours() const;
  ::message::List* release_neighbours();
  ::message::List* mutable_neighbours();
  void set_allocated_neighbours(::message::List* neighbours);
  private:
  const ::message::List& _internal_neighbours() const;
  ::message::List* _internal_mutable_neighbours();
  public:
  void unsafe_arena_set_allocated_neighbours(
      ::message::List* neighbours);
  ::message::List* unsafe_arena_release_neighbours();

  // @@protoc_insertion_point(class_scope:message.AllStateUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::List > routingtable_;
  ::message::List* leaf_;
  ::message::List* neighbours_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class GetVal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.GetVal) */ {
 public:
  inline GetVal() : GetVal(nullptr) {}
  virtual ~GetVal();

  GetVal(const GetVal& from);
  GetVal(GetVal&& from) noexcept
    : GetVal() {
    *this = ::std::move(from);
  }

  inline GetVal& operator=(const GetVal& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVal& operator=(GetVal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVal* internal_default_instance() {
    return reinterpret_cast<const GetVal*>(
               &_GetVal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetVal& a, GetVal& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetVal* New() const final {
    return CreateMaybeMessage<GetVal>(nullptr);
  }

  GetVal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVal& from);
  void MergeFrom(const GetVal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.GetVal";
  }
  protected:
  explicit GetVal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kActualKeyFieldNumber = 3,
    kNodeFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string actual_key = 3;
  void clear_actual_key();
  const std::string& actual_key() const;
  void set_actual_key(const std::string& value);
  void set_actual_key(std::string&& value);
  void set_actual_key(const char* value);
  void set_actual_key(const char* value, size_t size);
  std::string* mutable_actual_key();
  std::string* release_actual_key();
  void set_allocated_actual_key(std::string* actual_key);
  private:
  const std::string& _internal_actual_key() const;
  void _internal_set_actual_key(const std::string& value);
  std::string* _internal_mutable_actual_key();
  public:

  // .message.Node node = 2;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::message::Node& node() const;
  ::message::Node* release_node();
  ::message::Node* mutable_node();
  void set_allocated_node(::message::Node* node);
  private:
  const ::message::Node& _internal_node() const;
  ::message::Node* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::message::Node* node);
  ::message::Node* unsafe_arena_release_node();

  // @@protoc_insertion_point(class_scope:message.GetVal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actual_key_;
  ::message::Node* node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class GetValResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.GetValResponse) */ {
 public:
  inline GetValResponse() : GetValResponse(nullptr) {}
  virtual ~GetValResponse();

  GetValResponse(const GetValResponse& from);
  GetValResponse(GetValResponse&& from) noexcept
    : GetValResponse() {
    *this = ::std::move(from);
  }

  inline GetValResponse& operator=(const GetValResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetValResponse& operator=(GetValResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetValResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetValResponse* internal_default_instance() {
    return reinterpret_cast<const GetValResponse*>(
               &_GetValResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetValResponse& a, GetValResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetValResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetValResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetValResponse* New() const final {
    return CreateMaybeMessage<GetValResponse>(nullptr);
  }

  GetValResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetValResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetValResponse& from);
  void MergeFrom(const GetValResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetValResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.GetValResponse";
  }
  protected:
  explicit GetValResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kActualKeyFieldNumber = 3,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string actual_key = 3;
  void clear_actual_key();
  const std::string& actual_key() const;
  void set_actual_key(const std::string& value);
  void set_actual_key(std::string&& value);
  void set_actual_key(const char* value);
  void set_actual_key(const char* value, size_t size);
  std::string* mutable_actual_key();
  std::string* release_actual_key();
  void set_allocated_actual_key(std::string* actual_key);
  private:
  const std::string& _internal_actual_key() const;
  void _internal_set_actual_key(const std::string& value);
  std::string* _internal_mutable_actual_key();
  public:

  // @@protoc_insertion_point(class_scope:message.GetValResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actual_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class SetVal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.SetVal) */ {
 public:
  inline SetVal() : SetVal(nullptr) {}
  virtual ~SetVal();

  SetVal(const SetVal& from);
  SetVal(SetVal&& from) noexcept
    : SetVal() {
    *this = ::std::move(from);
  }

  inline SetVal& operator=(const SetVal& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVal& operator=(SetVal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetVal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetVal* internal_default_instance() {
    return reinterpret_cast<const SetVal*>(
               &_SetVal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SetVal& a, SetVal& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetVal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetVal* New() const final {
    return CreateMaybeMessage<SetVal>(nullptr);
  }

  SetVal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetVal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetVal& from);
  void MergeFrom(const SetVal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetVal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.SetVal";
  }
  protected:
  explicit SetVal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValFieldNumber = 2,
    kNodeFieldNumber = 3,
    kTerminalFieldNumber = 4,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string val = 2;
  void clear_val();
  const std::string& val() const;
  void set_val(const std::string& value);
  void set_val(std::string&& value);
  void set_val(const char* value);
  void set_val(const char* value, size_t size);
  std::string* mutable_val();
  std::string* release_val();
  void set_allocated_val(std::string* val);
  private:
  const std::string& _internal_val() const;
  void _internal_set_val(const std::string& value);
  std::string* _internal_mutable_val();
  public:

  // .message.Node node = 3;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::message::Node& node() const;
  ::message::Node* release_node();
  ::message::Node* mutable_node();
  void set_allocated_node(::message::Node* node);
  private:
  const ::message::Node& _internal_node() const;
  ::message::Node* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::message::Node* node);
  ::message::Node* unsafe_arena_release_node();

  // bool terminal = 4;
  void clear_terminal();
  bool terminal() const;
  void set_terminal(bool value);
  private:
  bool _internal_terminal() const;
  void _internal_set_terminal(bool value);
  public:

  // @@protoc_insertion_point(class_scope:message.SetVal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_;
  ::message::Node* node_;
  bool terminal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  enum MsgCase {
    kJoinMeMsg = 3,
    kJoinMsg = 4,
    kGetValMsg = 5,
    kSetValMsg = 6,
    kRoutingUpdate = 7,
    kAllStateUpdate = 8,
    kGetValResponse = 9,
    kDeleteNode = 10,
    kAddToHashTable = 11,
    kResponseLeafSet = 12,
    kResponseNeighbourSet = 13,
    kRequestRoutingEntry = 14,
    kResponseRoutingEntry = 15,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kSenderFieldNumber = 2,
    kJoinMeMsgFieldNumber = 3,
    kJoinMsgFieldNumber = 4,
    kGetValMsgFieldNumber = 5,
    kSetValMsgFieldNumber = 6,
    kRoutingUpdateFieldNumber = 7,
    kAllStateUpdateFieldNumber = 8,
    kGetValResponseFieldNumber = 9,
    kDeleteNodeFieldNumber = 10,
    kAddToHashTableFieldNumber = 11,
    kResponseLeafSetFieldNumber = 12,
    kResponseNeighbourSetFieldNumber = 13,
    kRequestRoutingEntryFieldNumber = 14,
    kResponseRoutingEntryFieldNumber = 15,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .message.Node sender = 2;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const ::message::Node& sender() const;
  ::message::Node* release_sender();
  ::message::Node* mutable_sender();
  void set_allocated_sender(::message::Node* sender);
  private:
  const ::message::Node& _internal_sender() const;
  ::message::Node* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::message::Node* sender);
  ::message::Node* unsafe_arena_release_sender();

  // .message.JoinMe joinMeMsg = 3;
  bool has_joinmemsg() const;
  private:
  bool _internal_has_joinmemsg() const;
  public:
  void clear_joinmemsg();
  const ::message::JoinMe& joinmemsg() const;
  ::message::JoinMe* release_joinmemsg();
  ::message::JoinMe* mutable_joinmemsg();
  void set_allocated_joinmemsg(::message::JoinMe* joinmemsg);
  private:
  const ::message::JoinMe& _internal_joinmemsg() const;
  ::message::JoinMe* _internal_mutable_joinmemsg();
  public:
  void unsafe_arena_set_allocated_joinmemsg(
      ::message::JoinMe* joinmemsg);
  ::message::JoinMe* unsafe_arena_release_joinmemsg();

  // .message.Join joinMsg = 4;
  bool has_joinmsg() const;
  private:
  bool _internal_has_joinmsg() const;
  public:
  void clear_joinmsg();
  const ::message::Join& joinmsg() const;
  ::message::Join* release_joinmsg();
  ::message::Join* mutable_joinmsg();
  void set_allocated_joinmsg(::message::Join* joinmsg);
  private:
  const ::message::Join& _internal_joinmsg() const;
  ::message::Join* _internal_mutable_joinmsg();
  public:
  void unsafe_arena_set_allocated_joinmsg(
      ::message::Join* joinmsg);
  ::message::Join* unsafe_arena_release_joinmsg();

  // .message.GetVal getValMsg = 5;
  bool has_getvalmsg() const;
  private:
  bool _internal_has_getvalmsg() const;
  public:
  void clear_getvalmsg();
  const ::message::GetVal& getvalmsg() const;
  ::message::GetVal* release_getvalmsg();
  ::message::GetVal* mutable_getvalmsg();
  void set_allocated_getvalmsg(::message::GetVal* getvalmsg);
  private:
  const ::message::GetVal& _internal_getvalmsg() const;
  ::message::GetVal* _internal_mutable_getvalmsg();
  public:
  void unsafe_arena_set_allocated_getvalmsg(
      ::message::GetVal* getvalmsg);
  ::message::GetVal* unsafe_arena_release_getvalmsg();

  // .message.SetVal setValMsg = 6;
  bool has_setvalmsg() const;
  private:
  bool _internal_has_setvalmsg() const;
  public:
  void clear_setvalmsg();
  const ::message::SetVal& setvalmsg() const;
  ::message::SetVal* release_setvalmsg();
  ::message::SetVal* mutable_setvalmsg();
  void set_allocated_setvalmsg(::message::SetVal* setvalmsg);
  private:
  const ::message::SetVal& _internal_setvalmsg() const;
  ::message::SetVal* _internal_mutable_setvalmsg();
  public:
  void unsafe_arena_set_allocated_setvalmsg(
      ::message::SetVal* setvalmsg);
  ::message::SetVal* unsafe_arena_release_setvalmsg();

  // .message.RoutingUpdate routingUpdate = 7;
  bool has_routingupdate() const;
  private:
  bool _internal_has_routingupdate() const;
  public:
  void clear_routingupdate();
  const ::message::RoutingUpdate& routingupdate() const;
  ::message::RoutingUpdate* release_routingupdate();
  ::message::RoutingUpdate* mutable_routingupdate();
  void set_allocated_routingupdate(::message::RoutingUpdate* routingupdate);
  private:
  const ::message::RoutingUpdate& _internal_routingupdate() const;
  ::message::RoutingUpdate* _internal_mutable_routingupdate();
  public:
  void unsafe_arena_set_allocated_routingupdate(
      ::message::RoutingUpdate* routingupdate);
  ::message::RoutingUpdate* unsafe_arena_release_routingupdate();

  // .message.AllStateUpdate allStateUpdate = 8;
  bool has_allstateupdate() const;
  private:
  bool _internal_has_allstateupdate() const;
  public:
  void clear_allstateupdate();
  const ::message::AllStateUpdate& allstateupdate() const;
  ::message::AllStateUpdate* release_allstateupdate();
  ::message::AllStateUpdate* mutable_allstateupdate();
  void set_allocated_allstateupdate(::message::AllStateUpdate* allstateupdate);
  private:
  const ::message::AllStateUpdate& _internal_allstateupdate() const;
  ::message::AllStateUpdate* _internal_mutable_allstateupdate();
  public:
  void unsafe_arena_set_allocated_allstateupdate(
      ::message::AllStateUpdate* allstateupdate);
  ::message::AllStateUpdate* unsafe_arena_release_allstateupdate();

  // .message.GetValResponse getValResponse = 9;
  bool has_getvalresponse() const;
  private:
  bool _internal_has_getvalresponse() const;
  public:
  void clear_getvalresponse();
  const ::message::GetValResponse& getvalresponse() const;
  ::message::GetValResponse* release_getvalresponse();
  ::message::GetValResponse* mutable_getvalresponse();
  void set_allocated_getvalresponse(::message::GetValResponse* getvalresponse);
  private:
  const ::message::GetValResponse& _internal_getvalresponse() const;
  ::message::GetValResponse* _internal_mutable_getvalresponse();
  public:
  void unsafe_arena_set_allocated_getvalresponse(
      ::message::GetValResponse* getvalresponse);
  ::message::GetValResponse* unsafe_arena_release_getvalresponse();

  // .message.DeleteNode deleteNode = 10;
  bool has_deletenode() const;
  private:
  bool _internal_has_deletenode() const;
  public:
  void clear_deletenode();
  const ::message::DeleteNode& deletenode() const;
  ::message::DeleteNode* release_deletenode();
  ::message::DeleteNode* mutable_deletenode();
  void set_allocated_deletenode(::message::DeleteNode* deletenode);
  private:
  const ::message::DeleteNode& _internal_deletenode() const;
  ::message::DeleteNode* _internal_mutable_deletenode();
  public:
  void unsafe_arena_set_allocated_deletenode(
      ::message::DeleteNode* deletenode);
  ::message::DeleteNode* unsafe_arena_release_deletenode();

  // .message.AddToHashTable addToHashTable = 11;
  bool has_addtohashtable() const;
  private:
  bool _internal_has_addtohashtable() const;
  public:
  void clear_addtohashtable();
  const ::message::AddToHashTable& addtohashtable() const;
  ::message::AddToHashTable* release_addtohashtable();
  ::message::AddToHashTable* mutable_addtohashtable();
  void set_allocated_addtohashtable(::message::AddToHashTable* addtohashtable);
  private:
  const ::message::AddToHashTable& _internal_addtohashtable() const;
  ::message::AddToHashTable* _internal_mutable_addtohashtable();
  public:
  void unsafe_arena_set_allocated_addtohashtable(
      ::message::AddToHashTable* addtohashtable);
  ::message::AddToHashTable* unsafe_arena_release_addtohashtable();

  // .message.ResponseLeafSet responseLeafSet = 12;
  bool has_responseleafset() const;
  private:
  bool _internal_has_responseleafset() const;
  public:
  void clear_responseleafset();
  const ::message::ResponseLeafSet& responseleafset() const;
  ::message::ResponseLeafSet* release_responseleafset();
  ::message::ResponseLeafSet* mutable_responseleafset();
  void set_allocated_responseleafset(::message::ResponseLeafSet* responseleafset);
  private:
  const ::message::ResponseLeafSet& _internal_responseleafset() const;
  ::message::ResponseLeafSet* _internal_mutable_responseleafset();
  public:
  void unsafe_arena_set_allocated_responseleafset(
      ::message::ResponseLeafSet* responseleafset);
  ::message::ResponseLeafSet* unsafe_arena_release_responseleafset();

  // .message.ResponseNeighbourSet responseNeighbourSet = 13;
  bool has_responseneighbourset() const;
  private:
  bool _internal_has_responseneighbourset() const;
  public:
  void clear_responseneighbourset();
  const ::message::ResponseNeighbourSet& responseneighbourset() const;
  ::message::ResponseNeighbourSet* release_responseneighbourset();
  ::message::ResponseNeighbourSet* mutable_responseneighbourset();
  void set_allocated_responseneighbourset(::message::ResponseNeighbourSet* responseneighbourset);
  private:
  const ::message::ResponseNeighbourSet& _internal_responseneighbourset() const;
  ::message::ResponseNeighbourSet* _internal_mutable_responseneighbourset();
  public:
  void unsafe_arena_set_allocated_responseneighbourset(
      ::message::ResponseNeighbourSet* responseneighbourset);
  ::message::ResponseNeighbourSet* unsafe_arena_release_responseneighbourset();

  // .message.RequestRoutingEntry requestRoutingEntry = 14;
  bool has_requestroutingentry() const;
  private:
  bool _internal_has_requestroutingentry() const;
  public:
  void clear_requestroutingentry();
  const ::message::RequestRoutingEntry& requestroutingentry() const;
  ::message::RequestRoutingEntry* release_requestroutingentry();
  ::message::RequestRoutingEntry* mutable_requestroutingentry();
  void set_allocated_requestroutingentry(::message::RequestRoutingEntry* requestroutingentry);
  private:
  const ::message::RequestRoutingEntry& _internal_requestroutingentry() const;
  ::message::RequestRoutingEntry* _internal_mutable_requestroutingentry();
  public:
  void unsafe_arena_set_allocated_requestroutingentry(
      ::message::RequestRoutingEntry* requestroutingentry);
  ::message::RequestRoutingEntry* unsafe_arena_release_requestroutingentry();

  // .message.ResponseRoutingEntry responseRoutingEntry = 15;
  bool has_responseroutingentry() const;
  private:
  bool _internal_has_responseroutingentry() const;
  public:
  void clear_responseroutingentry();
  const ::message::ResponseRoutingEntry& responseroutingentry() const;
  ::message::ResponseRoutingEntry* release_responseroutingentry();
  ::message::ResponseRoutingEntry* mutable_responseroutingentry();
  void set_allocated_responseroutingentry(::message::ResponseRoutingEntry* responseroutingentry);
  private:
  const ::message::ResponseRoutingEntry& _internal_responseroutingentry() const;
  ::message::ResponseRoutingEntry* _internal_mutable_responseroutingentry();
  public:
  void unsafe_arena_set_allocated_responseroutingentry(
      ::message::ResponseRoutingEntry* responseroutingentry);
  ::message::ResponseRoutingEntry* unsafe_arena_release_responseroutingentry();

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:message.Message)
 private:
  class _Internal;
  void set_has_joinmemsg();
  void set_has_joinmsg();
  void set_has_getvalmsg();
  void set_has_setvalmsg();
  void set_has_routingupdate();
  void set_has_allstateupdate();
  void set_has_getvalresponse();
  void set_has_deletenode();
  void set_has_addtohashtable();
  void set_has_responseleafset();
  void set_has_responseneighbourset();
  void set_has_requestroutingentry();
  void set_has_responseroutingentry();

  inline bool has_msg() const;
  inline void clear_has_msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::message::Node* sender_;
  union MsgUnion {
    MsgUnion() {}
    ::message::JoinMe* joinmemsg_;
    ::message::Join* joinmsg_;
    ::message::GetVal* getvalmsg_;
    ::message::SetVal* setvalmsg_;
    ::message::RoutingUpdate* routingupdate_;
    ::message::AllStateUpdate* allstateupdate_;
    ::message::GetValResponse* getvalresponse_;
    ::message::DeleteNode* deletenode_;
    ::message::AddToHashTable* addtohashtable_;
    ::message::ResponseLeafSet* responseleafset_;
    ::message::ResponseNeighbourSet* responseneighbourset_;
    ::message::RequestRoutingEntry* requestroutingentry_;
    ::message::ResponseRoutingEntry* responseroutingentry_;
  } msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:message.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class DeleteNode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.DeleteNode) */ {
 public:
  inline DeleteNode() : DeleteNode(nullptr) {}
  virtual ~DeleteNode();

  DeleteNode(const DeleteNode& from);
  DeleteNode(DeleteNode&& from) noexcept
    : DeleteNode() {
    *this = ::std::move(from);
  }

  inline DeleteNode& operator=(const DeleteNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteNode& operator=(DeleteNode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteNode* internal_default_instance() {
    return reinterpret_cast<const DeleteNode*>(
               &_DeleteNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DeleteNode& a, DeleteNode& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteNode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteNode* New() const final {
    return CreateMaybeMessage<DeleteNode>(nullptr);
  }

  DeleteNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteNode& from);
  void MergeFrom(const DeleteNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.DeleteNode";
  }
  protected:
  explicit DeleteNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
  };
  // .message.Node node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::message::Node& node() const;
  ::message::Node* release_node();
  ::message::Node* mutable_node();
  void set_allocated_node(::message::Node* node);
  private:
  const ::message::Node& _internal_node() const;
  ::message::Node* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::message::Node* node);
  ::message::Node* unsafe_arena_release_node();

  // @@protoc_insertion_point(class_scope:message.DeleteNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::message::Node* node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class AddToHashTable_HashMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AddToHashTable_HashMapEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AddToHashTable_HashMapEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  AddToHashTable_HashMapEntry_DoNotUse();
  explicit AddToHashTable_HashMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AddToHashTable_HashMapEntry_DoNotUse& other);
  static const AddToHashTable_HashMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AddToHashTable_HashMapEntry_DoNotUse*>(&_AddToHashTable_HashMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "message.AddToHashTable.HashMapEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "message.AddToHashTable.HashMapEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[13];
  }

  public:
};

// -------------------------------------------------------------------

class AddToHashTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.AddToHashTable) */ {
 public:
  inline AddToHashTable() : AddToHashTable(nullptr) {}
  virtual ~AddToHashTable();

  AddToHashTable(const AddToHashTable& from);
  AddToHashTable(AddToHashTable&& from) noexcept
    : AddToHashTable() {
    *this = ::std::move(from);
  }

  inline AddToHashTable& operator=(const AddToHashTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddToHashTable& operator=(AddToHashTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddToHashTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddToHashTable* internal_default_instance() {
    return reinterpret_cast<const AddToHashTable*>(
               &_AddToHashTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(AddToHashTable& a, AddToHashTable& b) {
    a.Swap(&b);
  }
  inline void Swap(AddToHashTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddToHashTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddToHashTable* New() const final {
    return CreateMaybeMessage<AddToHashTable>(nullptr);
  }

  AddToHashTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddToHashTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddToHashTable& from);
  void MergeFrom(const AddToHashTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddToHashTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.AddToHashTable";
  }
  protected:
  explicit AddToHashTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kHashMapFieldNumber = 1,
  };
  // map<string, string> hashMap = 1;
  int hashmap_size() const;
  private:
  int _internal_hashmap_size() const;
  public:
  void clear_hashmap();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_hashmap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_hashmap();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      hashmap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_hashmap();

  // @@protoc_insertion_point(class_scope:message.AddToHashTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AddToHashTable_HashMapEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > hashmap_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ShutDown PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.ShutDown) */ {
 public:
  inline ShutDown() : ShutDown(nullptr) {}
  virtual ~ShutDown();

  ShutDown(const ShutDown& from);
  ShutDown(ShutDown&& from) noexcept
    : ShutDown() {
    *this = ::std::move(from);
  }

  inline ShutDown& operator=(const ShutDown& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShutDown& operator=(ShutDown&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShutDown& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShutDown* internal_default_instance() {
    return reinterpret_cast<const ShutDown*>(
               &_ShutDown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ShutDown& a, ShutDown& b) {
    a.Swap(&b);
  }
  inline void Swap(ShutDown* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShutDown* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShutDown* New() const final {
    return CreateMaybeMessage<ShutDown>(nullptr);
  }

  ShutDown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShutDown>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShutDown& from);
  void MergeFrom(const ShutDown& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShutDown* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.ShutDown";
  }
  protected:
  explicit ShutDown(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:message.ShutDown)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ResponseLeafSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.ResponseLeafSet) */ {
 public:
  inline ResponseLeafSet() : ResponseLeafSet(nullptr) {}
  virtual ~ResponseLeafSet();

  ResponseLeafSet(const ResponseLeafSet& from);
  ResponseLeafSet(ResponseLeafSet&& from) noexcept
    : ResponseLeafSet() {
    *this = ::std::move(from);
  }

  inline ResponseLeafSet& operator=(const ResponseLeafSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseLeafSet& operator=(ResponseLeafSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseLeafSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseLeafSet* internal_default_instance() {
    return reinterpret_cast<const ResponseLeafSet*>(
               &_ResponseLeafSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ResponseLeafSet& a, ResponseLeafSet& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseLeafSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseLeafSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseLeafSet* New() const final {
    return CreateMaybeMessage<ResponseLeafSet>(nullptr);
  }

  ResponseLeafSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseLeafSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseLeafSet& from);
  void MergeFrom(const ResponseLeafSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseLeafSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.ResponseLeafSet";
  }
  protected:
  explicit ResponseLeafSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeafFieldNumber = 1,
  };
  // .message.List leaf = 1;
  bool has_leaf() const;
  private:
  bool _internal_has_leaf() const;
  public:
  void clear_leaf();
  const ::message::List& leaf() const;
  ::message::List* release_leaf();
  ::message::List* mutable_leaf();
  void set_allocated_leaf(::message::List* leaf);
  private:
  const ::message::List& _internal_leaf() const;
  ::message::List* _internal_mutable_leaf();
  public:
  void unsafe_arena_set_allocated_leaf(
      ::message::List* leaf);
  ::message::List* unsafe_arena_release_leaf();

  // @@protoc_insertion_point(class_scope:message.ResponseLeafSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::message::List* leaf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ResponseNeighbourSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.ResponseNeighbourSet) */ {
 public:
  inline ResponseNeighbourSet() : ResponseNeighbourSet(nullptr) {}
  virtual ~ResponseNeighbourSet();

  ResponseNeighbourSet(const ResponseNeighbourSet& from);
  ResponseNeighbourSet(ResponseNeighbourSet&& from) noexcept
    : ResponseNeighbourSet() {
    *this = ::std::move(from);
  }

  inline ResponseNeighbourSet& operator=(const ResponseNeighbourSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseNeighbourSet& operator=(ResponseNeighbourSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseNeighbourSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseNeighbourSet* internal_default_instance() {
    return reinterpret_cast<const ResponseNeighbourSet*>(
               &_ResponseNeighbourSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ResponseNeighbourSet& a, ResponseNeighbourSet& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseNeighbourSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseNeighbourSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseNeighbourSet* New() const final {
    return CreateMaybeMessage<ResponseNeighbourSet>(nullptr);
  }

  ResponseNeighbourSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseNeighbourSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseNeighbourSet& from);
  void MergeFrom(const ResponseNeighbourSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseNeighbourSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.ResponseNeighbourSet";
  }
  protected:
  explicit ResponseNeighbourSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNeighboursFieldNumber = 1,
  };
  // .message.List neighbours = 1;
  bool has_neighbours() const;
  private:
  bool _internal_has_neighbours() const;
  public:
  void clear_neighbours();
  const ::message::List& neighbours() const;
  ::message::List* release_neighbours();
  ::message::List* mutable_neighbours();
  void set_allocated_neighbours(::message::List* neighbours);
  private:
  const ::message::List& _internal_neighbours() const;
  ::message::List* _internal_mutable_neighbours();
  public:
  void unsafe_arena_set_allocated_neighbours(
      ::message::List* neighbours);
  ::message::List* unsafe_arena_release_neighbours();

  // @@protoc_insertion_point(class_scope:message.ResponseNeighbourSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::message::List* neighbours_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ResponseRoutingEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.ResponseRoutingEntry) */ {
 public:
  inline ResponseRoutingEntry() : ResponseRoutingEntry(nullptr) {}
  virtual ~ResponseRoutingEntry();

  ResponseRoutingEntry(const ResponseRoutingEntry& from);
  ResponseRoutingEntry(ResponseRoutingEntry&& from) noexcept
    : ResponseRoutingEntry() {
    *this = ::std::move(from);
  }

  inline ResponseRoutingEntry& operator=(const ResponseRoutingEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseRoutingEntry& operator=(ResponseRoutingEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseRoutingEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseRoutingEntry* internal_default_instance() {
    return reinterpret_cast<const ResponseRoutingEntry*>(
               &_ResponseRoutingEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ResponseRoutingEntry& a, ResponseRoutingEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseRoutingEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseRoutingEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseRoutingEntry* New() const final {
    return CreateMaybeMessage<ResponseRoutingEntry>(nullptr);
  }

  ResponseRoutingEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseRoutingEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseRoutingEntry& from);
  void MergeFrom(const ResponseRoutingEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseRoutingEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.ResponseRoutingEntry";
  }
  protected:
  explicit ResponseRoutingEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutingEntryFieldNumber = 1,
  };
  // .message.List routingEntry = 1;
  bool has_routingentry() const;
  private:
  bool _internal_has_routingentry() const;
  public:
  void clear_routingentry();
  const ::message::List& routingentry() const;
  ::message::List* release_routingentry();
  ::message::List* mutable_routingentry();
  void set_allocated_routingentry(::message::List* routingentry);
  private:
  const ::message::List& _internal_routingentry() const;
  ::message::List* _internal_mutable_routingentry();
  public:
  void unsafe_arena_set_allocated_routingentry(
      ::message::List* routingentry);
  ::message::List* unsafe_arena_release_routingentry();

  // @@protoc_insertion_point(class_scope:message.ResponseRoutingEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::message::List* routingentry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RequestRoutingEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.RequestRoutingEntry) */ {
 public:
  inline RequestRoutingEntry() : RequestRoutingEntry(nullptr) {}
  virtual ~RequestRoutingEntry();

  RequestRoutingEntry(const RequestRoutingEntry& from);
  RequestRoutingEntry(RequestRoutingEntry&& from) noexcept
    : RequestRoutingEntry() {
    *this = ::std::move(from);
  }

  inline RequestRoutingEntry& operator=(const RequestRoutingEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestRoutingEntry& operator=(RequestRoutingEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestRoutingEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestRoutingEntry* internal_default_instance() {
    return reinterpret_cast<const RequestRoutingEntry*>(
               &_RequestRoutingEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(RequestRoutingEntry& a, RequestRoutingEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestRoutingEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestRoutingEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestRoutingEntry* New() const final {
    return CreateMaybeMessage<RequestRoutingEntry>(nullptr);
  }

  RequestRoutingEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestRoutingEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestRoutingEntry& from);
  void MergeFrom(const RequestRoutingEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestRoutingEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.RequestRoutingEntry";
  }
  protected:
  explicit RequestRoutingEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:message.RequestRoutingEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JoinMe

// string nodeID = 1;
inline void JoinMe::clear_nodeid() {
  nodeid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JoinMe::nodeid() const {
  // @@protoc_insertion_point(field_get:message.JoinMe.nodeID)
  return _internal_nodeid();
}
inline void JoinMe::set_nodeid(const std::string& value) {
  _internal_set_nodeid(value);
  // @@protoc_insertion_point(field_set:message.JoinMe.nodeID)
}
inline std::string* JoinMe::mutable_nodeid() {
  // @@protoc_insertion_point(field_mutable:message.JoinMe.nodeID)
  return _internal_mutable_nodeid();
}
inline const std::string& JoinMe::_internal_nodeid() const {
  return nodeid_.Get();
}
inline void JoinMe::_internal_set_nodeid(const std::string& value) {
  
  nodeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JoinMe::set_nodeid(std::string&& value) {
  
  nodeid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.JoinMe.nodeID)
}
inline void JoinMe::set_nodeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nodeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.JoinMe.nodeID)
}
inline void JoinMe::set_nodeid(const char* value,
    size_t size) {
  
  nodeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.JoinMe.nodeID)
}
inline std::string* JoinMe::_internal_mutable_nodeid() {
  
  return nodeid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JoinMe::release_nodeid() {
  // @@protoc_insertion_point(field_release:message.JoinMe.nodeID)
  return nodeid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JoinMe::set_allocated_nodeid(std::string* nodeid) {
  if (nodeid != nullptr) {
    
  } else {
    
  }
  nodeid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodeid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.JoinMe.nodeID)
}

// string IP = 2;
inline void JoinMe::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JoinMe::ip() const {
  // @@protoc_insertion_point(field_get:message.JoinMe.IP)
  return _internal_ip();
}
inline void JoinMe::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:message.JoinMe.IP)
}
inline std::string* JoinMe::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:message.JoinMe.IP)
  return _internal_mutable_ip();
}
inline const std::string& JoinMe::_internal_ip() const {
  return ip_.Get();
}
inline void JoinMe::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JoinMe::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.JoinMe.IP)
}
inline void JoinMe::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.JoinMe.IP)
}
inline void JoinMe::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.JoinMe.IP)
}
inline std::string* JoinMe::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JoinMe::release_ip() {
  // @@protoc_insertion_point(field_release:message.JoinMe.IP)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JoinMe::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.JoinMe.IP)
}

// string port = 3;
inline void JoinMe::clear_port() {
  port_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JoinMe::port() const {
  // @@protoc_insertion_point(field_get:message.JoinMe.port)
  return _internal_port();
}
inline void JoinMe::set_port(const std::string& value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:message.JoinMe.port)
}
inline std::string* JoinMe::mutable_port() {
  // @@protoc_insertion_point(field_mutable:message.JoinMe.port)
  return _internal_mutable_port();
}
inline const std::string& JoinMe::_internal_port() const {
  return port_.Get();
}
inline void JoinMe::_internal_set_port(const std::string& value) {
  
  port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JoinMe::set_port(std::string&& value) {
  
  port_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.JoinMe.port)
}
inline void JoinMe::set_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.JoinMe.port)
}
inline void JoinMe::set_port(const char* value,
    size_t size) {
  
  port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.JoinMe.port)
}
inline std::string* JoinMe::_internal_mutable_port() {
  
  return port_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JoinMe::release_port() {
  // @@protoc_insertion_point(field_release:message.JoinMe.port)
  return port_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JoinMe::set_allocated_port(std::string* port) {
  if (port != nullptr) {
    
  } else {
    
  }
  port_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.JoinMe.port)
}

// -------------------------------------------------------------------

// Join

// string nodeID = 1;
inline void Join::clear_nodeid() {
  nodeid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Join::nodeid() const {
  // @@protoc_insertion_point(field_get:message.Join.nodeID)
  return _internal_nodeid();
}
inline void Join::set_nodeid(const std::string& value) {
  _internal_set_nodeid(value);
  // @@protoc_insertion_point(field_set:message.Join.nodeID)
}
inline std::string* Join::mutable_nodeid() {
  // @@protoc_insertion_point(field_mutable:message.Join.nodeID)
  return _internal_mutable_nodeid();
}
inline const std::string& Join::_internal_nodeid() const {
  return nodeid_.Get();
}
inline void Join::_internal_set_nodeid(const std::string& value) {
  
  nodeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Join::set_nodeid(std::string&& value) {
  
  nodeid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.Join.nodeID)
}
inline void Join::set_nodeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nodeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.Join.nodeID)
}
inline void Join::set_nodeid(const char* value,
    size_t size) {
  
  nodeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.Join.nodeID)
}
inline std::string* Join::_internal_mutable_nodeid() {
  
  return nodeid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Join::release_nodeid() {
  // @@protoc_insertion_point(field_release:message.Join.nodeID)
  return nodeid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Join::set_allocated_nodeid(std::string* nodeid) {
  if (nodeid != nullptr) {
    
  } else {
    
  }
  nodeid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodeid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.Join.nodeID)
}

// string IP = 2;
inline void Join::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Join::ip() const {
  // @@protoc_insertion_point(field_get:message.Join.IP)
  return _internal_ip();
}
inline void Join::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:message.Join.IP)
}
inline std::string* Join::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:message.Join.IP)
  return _internal_mutable_ip();
}
inline const std::string& Join::_internal_ip() const {
  return ip_.Get();
}
inline void Join::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Join::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.Join.IP)
}
inline void Join::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.Join.IP)
}
inline void Join::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.Join.IP)
}
inline std::string* Join::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Join::release_ip() {
  // @@protoc_insertion_point(field_release:message.Join.IP)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Join::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.Join.IP)
}

// string port = 3;
inline void Join::clear_port() {
  port_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Join::port() const {
  // @@protoc_insertion_point(field_get:message.Join.port)
  return _internal_port();
}
inline void Join::set_port(const std::string& value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:message.Join.port)
}
inline std::string* Join::mutable_port() {
  // @@protoc_insertion_point(field_mutable:message.Join.port)
  return _internal_mutable_port();
}
inline const std::string& Join::_internal_port() const {
  return port_.Get();
}
inline void Join::_internal_set_port(const std::string& value) {
  
  port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Join::set_port(std::string&& value) {
  
  port_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.Join.port)
}
inline void Join::set_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.Join.port)
}
inline void Join::set_port(const char* value,
    size_t size) {
  
  port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.Join.port)
}
inline std::string* Join::_internal_mutable_port() {
  
  return port_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Join::release_port() {
  // @@protoc_insertion_point(field_release:message.Join.port)
  return port_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Join::set_allocated_port(std::string* port) {
  if (port != nullptr) {
    
  } else {
    
  }
  port_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.Join.port)
}

// int32 row_index = 4;
inline void Join::clear_row_index() {
  row_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Join::_internal_row_index() const {
  return row_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Join::row_index() const {
  // @@protoc_insertion_point(field_get:message.Join.row_index)
  return _internal_row_index();
}
inline void Join::_internal_set_row_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  row_index_ = value;
}
inline void Join::set_row_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_row_index(value);
  // @@protoc_insertion_point(field_set:message.Join.row_index)
}

// -------------------------------------------------------------------

// Node

// string nodeID = 1;
inline void Node::clear_nodeid() {
  nodeid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Node::nodeid() const {
  // @@protoc_insertion_point(field_get:message.Node.nodeID)
  return _internal_nodeid();
}
inline void Node::set_nodeid(const std::string& value) {
  _internal_set_nodeid(value);
  // @@protoc_insertion_point(field_set:message.Node.nodeID)
}
inline std::string* Node::mutable_nodeid() {
  // @@protoc_insertion_point(field_mutable:message.Node.nodeID)
  return _internal_mutable_nodeid();
}
inline const std::string& Node::_internal_nodeid() const {
  return nodeid_.Get();
}
inline void Node::_internal_set_nodeid(const std::string& value) {
  
  nodeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Node::set_nodeid(std::string&& value) {
  
  nodeid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.Node.nodeID)
}
inline void Node::set_nodeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nodeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.Node.nodeID)
}
inline void Node::set_nodeid(const char* value,
    size_t size) {
  
  nodeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.Node.nodeID)
}
inline std::string* Node::_internal_mutable_nodeid() {
  
  return nodeid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Node::release_nodeid() {
  // @@protoc_insertion_point(field_release:message.Node.nodeID)
  return nodeid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Node::set_allocated_nodeid(std::string* nodeid) {
  if (nodeid != nullptr) {
    
  } else {
    
  }
  nodeid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodeid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.Node.nodeID)
}

// string IP = 2;
inline void Node::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Node::ip() const {
  // @@protoc_insertion_point(field_get:message.Node.IP)
  return _internal_ip();
}
inline void Node::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:message.Node.IP)
}
inline std::string* Node::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:message.Node.IP)
  return _internal_mutable_ip();
}
inline const std::string& Node::_internal_ip() const {
  return ip_.Get();
}
inline void Node::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Node::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.Node.IP)
}
inline void Node::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.Node.IP)
}
inline void Node::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.Node.IP)
}
inline std::string* Node::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Node::release_ip() {
  // @@protoc_insertion_point(field_release:message.Node.IP)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Node::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.Node.IP)
}

// string port = 3;
inline void Node::clear_port() {
  port_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Node::port() const {
  // @@protoc_insertion_point(field_get:message.Node.port)
  return _internal_port();
}
inline void Node::set_port(const std::string& value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:message.Node.port)
}
inline std::string* Node::mutable_port() {
  // @@protoc_insertion_point(field_mutable:message.Node.port)
  return _internal_mutable_port();
}
inline const std::string& Node::_internal_port() const {
  return port_.Get();
}
inline void Node::_internal_set_port(const std::string& value) {
  
  port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Node::set_port(std::string&& value) {
  
  port_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.Node.port)
}
inline void Node::set_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.Node.port)
}
inline void Node::set_port(const char* value,
    size_t size) {
  
  port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.Node.port)
}
inline std::string* Node::_internal_mutable_port() {
  
  return port_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Node::release_port() {
  // @@protoc_insertion_point(field_release:message.Node.port)
  return port_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Node::set_allocated_port(std::string* port) {
  if (port != nullptr) {
    
  } else {
    
  }
  port_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.Node.port)
}

// -------------------------------------------------------------------

// List

// repeated .message.Node node = 1;
inline int List::_internal_node_size() const {
  return node_.size();
}
inline int List::node_size() const {
  return _internal_node_size();
}
inline void List::clear_node() {
  node_.Clear();
}
inline ::message::Node* List::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:message.List.node)
  return node_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::Node >*
List::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:message.List.node)
  return &node_;
}
inline const ::message::Node& List::_internal_node(int index) const {
  return node_.Get(index);
}
inline const ::message::Node& List::node(int index) const {
  // @@protoc_insertion_point(field_get:message.List.node)
  return _internal_node(index);
}
inline ::message::Node* List::_internal_add_node() {
  return node_.Add();
}
inline ::message::Node* List::add_node() {
  // @@protoc_insertion_point(field_add:message.List.node)
  return _internal_add_node();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::Node >&
List::node() const {
  // @@protoc_insertion_point(field_list:message.List.node)
  return node_;
}

// -------------------------------------------------------------------

// RoutingUpdate_RoutingEntry

// int32 index = 1;
inline void RoutingUpdate_RoutingEntry::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoutingUpdate_RoutingEntry::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoutingUpdate_RoutingEntry::index() const {
  // @@protoc_insertion_point(field_get:message.RoutingUpdate.RoutingEntry.index)
  return _internal_index();
}
inline void RoutingUpdate_RoutingEntry::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void RoutingUpdate_RoutingEntry::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:message.RoutingUpdate.RoutingEntry.index)
}

// .message.List nodeList = 2;
inline bool RoutingUpdate_RoutingEntry::_internal_has_nodelist() const {
  return this != internal_default_instance() && nodelist_ != nullptr;
}
inline bool RoutingUpdate_RoutingEntry::has_nodelist() const {
  return _internal_has_nodelist();
}
inline void RoutingUpdate_RoutingEntry::clear_nodelist() {
  if (GetArena() == nullptr && nodelist_ != nullptr) {
    delete nodelist_;
  }
  nodelist_ = nullptr;
}
inline const ::message::List& RoutingUpdate_RoutingEntry::_internal_nodelist() const {
  const ::message::List* p = nodelist_;
  return p != nullptr ? *p : *reinterpret_cast<const ::message::List*>(
      &::message::_List_default_instance_);
}
inline const ::message::List& RoutingUpdate_RoutingEntry::nodelist() const {
  // @@protoc_insertion_point(field_get:message.RoutingUpdate.RoutingEntry.nodeList)
  return _internal_nodelist();
}
inline void RoutingUpdate_RoutingEntry::unsafe_arena_set_allocated_nodelist(
    ::message::List* nodelist) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nodelist_);
  }
  nodelist_ = nodelist;
  if (nodelist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.RoutingUpdate.RoutingEntry.nodeList)
}
inline ::message::List* RoutingUpdate_RoutingEntry::release_nodelist() {
  
  ::message::List* temp = nodelist_;
  nodelist_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::message::List* RoutingUpdate_RoutingEntry::unsafe_arena_release_nodelist() {
  // @@protoc_insertion_point(field_release:message.RoutingUpdate.RoutingEntry.nodeList)
  
  ::message::List* temp = nodelist_;
  nodelist_ = nullptr;
  return temp;
}
inline ::message::List* RoutingUpdate_RoutingEntry::_internal_mutable_nodelist() {
  
  if (nodelist_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::List>(GetArena());
    nodelist_ = p;
  }
  return nodelist_;
}
inline ::message::List* RoutingUpdate_RoutingEntry::mutable_nodelist() {
  // @@protoc_insertion_point(field_mutable:message.RoutingUpdate.RoutingEntry.nodeList)
  return _internal_mutable_nodelist();
}
inline void RoutingUpdate_RoutingEntry::set_allocated_nodelist(::message::List* nodelist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete nodelist_;
  }
  if (nodelist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nodelist);
    if (message_arena != submessage_arena) {
      nodelist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nodelist, submessage_arena);
    }
    
  } else {
    
  }
  nodelist_ = nodelist;
  // @@protoc_insertion_point(field_set_allocated:message.RoutingUpdate.RoutingEntry.nodeList)
}

// -------------------------------------------------------------------

// RoutingUpdate

// bool buddy = 1;
inline void RoutingUpdate::clear_buddy() {
  buddy_ = false;
}
inline bool RoutingUpdate::_internal_buddy() const {
  return buddy_;
}
inline bool RoutingUpdate::buddy() const {
  // @@protoc_insertion_point(field_get:message.RoutingUpdate.buddy)
  return _internal_buddy();
}
inline void RoutingUpdate::_internal_set_buddy(bool value) {
  
  buddy_ = value;
}
inline void RoutingUpdate::set_buddy(bool value) {
  _internal_set_buddy(value);
  // @@protoc_insertion_point(field_set:message.RoutingUpdate.buddy)
}

// bool terminal = 2;
inline void RoutingUpdate::clear_terminal() {
  terminal_ = false;
}
inline bool RoutingUpdate::_internal_terminal() const {
  return terminal_;
}
inline bool RoutingUpdate::terminal() const {
  // @@protoc_insertion_point(field_get:message.RoutingUpdate.terminal)
  return _internal_terminal();
}
inline void RoutingUpdate::_internal_set_terminal(bool value) {
  
  terminal_ = value;
}
inline void RoutingUpdate::set_terminal(bool value) {
  _internal_set_terminal(value);
  // @@protoc_insertion_point(field_set:message.RoutingUpdate.terminal)
}

// .message.List leaf = 3;
inline bool RoutingUpdate::_internal_has_leaf() const {
  return this != internal_default_instance() && leaf_ != nullptr;
}
inline bool RoutingUpdate::has_leaf() const {
  return _internal_has_leaf();
}
inline void RoutingUpdate::clear_leaf() {
  if (GetArena() == nullptr && leaf_ != nullptr) {
    delete leaf_;
  }
  leaf_ = nullptr;
}
inline const ::message::List& RoutingUpdate::_internal_leaf() const {
  const ::message::List* p = leaf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::message::List*>(
      &::message::_List_default_instance_);
}
inline const ::message::List& RoutingUpdate::leaf() const {
  // @@protoc_insertion_point(field_get:message.RoutingUpdate.leaf)
  return _internal_leaf();
}
inline void RoutingUpdate::unsafe_arena_set_allocated_leaf(
    ::message::List* leaf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leaf_);
  }
  leaf_ = leaf;
  if (leaf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.RoutingUpdate.leaf)
}
inline ::message::List* RoutingUpdate::release_leaf() {
  
  ::message::List* temp = leaf_;
  leaf_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::message::List* RoutingUpdate::unsafe_arena_release_leaf() {
  // @@protoc_insertion_point(field_release:message.RoutingUpdate.leaf)
  
  ::message::List* temp = leaf_;
  leaf_ = nullptr;
  return temp;
}
inline ::message::List* RoutingUpdate::_internal_mutable_leaf() {
  
  if (leaf_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::List>(GetArena());
    leaf_ = p;
  }
  return leaf_;
}
inline ::message::List* RoutingUpdate::mutable_leaf() {
  // @@protoc_insertion_point(field_mutable:message.RoutingUpdate.leaf)
  return _internal_mutable_leaf();
}
inline void RoutingUpdate::set_allocated_leaf(::message::List* leaf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete leaf_;
  }
  if (leaf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(leaf);
    if (message_arena != submessage_arena) {
      leaf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leaf, submessage_arena);
    }
    
  } else {
    
  }
  leaf_ = leaf;
  // @@protoc_insertion_point(field_set_allocated:message.RoutingUpdate.leaf)
}

// .message.List neighbours = 4;
inline bool RoutingUpdate::_internal_has_neighbours() const {
  return this != internal_default_instance() && neighbours_ != nullptr;
}
inline bool RoutingUpdate::has_neighbours() const {
  return _internal_has_neighbours();
}
inline void RoutingUpdate::clear_neighbours() {
  if (GetArena() == nullptr && neighbours_ != nullptr) {
    delete neighbours_;
  }
  neighbours_ = nullptr;
}
inline const ::message::List& RoutingUpdate::_internal_neighbours() const {
  const ::message::List* p = neighbours_;
  return p != nullptr ? *p : *reinterpret_cast<const ::message::List*>(
      &::message::_List_default_instance_);
}
inline const ::message::List& RoutingUpdate::neighbours() const {
  // @@protoc_insertion_point(field_get:message.RoutingUpdate.neighbours)
  return _internal_neighbours();
}
inline void RoutingUpdate::unsafe_arena_set_allocated_neighbours(
    ::message::List* neighbours) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(neighbours_);
  }
  neighbours_ = neighbours;
  if (neighbours) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.RoutingUpdate.neighbours)
}
inline ::message::List* RoutingUpdate::release_neighbours() {
  
  ::message::List* temp = neighbours_;
  neighbours_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::message::List* RoutingUpdate::unsafe_arena_release_neighbours() {
  // @@protoc_insertion_point(field_release:message.RoutingUpdate.neighbours)
  
  ::message::List* temp = neighbours_;
  neighbours_ = nullptr;
  return temp;
}
inline ::message::List* RoutingUpdate::_internal_mutable_neighbours() {
  
  if (neighbours_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::List>(GetArena());
    neighbours_ = p;
  }
  return neighbours_;
}
inline ::message::List* RoutingUpdate::mutable_neighbours() {
  // @@protoc_insertion_point(field_mutable:message.RoutingUpdate.neighbours)
  return _internal_mutable_neighbours();
}
inline void RoutingUpdate::set_allocated_neighbours(::message::List* neighbours) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete neighbours_;
  }
  if (neighbours) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(neighbours);
    if (message_arena != submessage_arena) {
      neighbours = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, neighbours, submessage_arena);
    }
    
  } else {
    
  }
  neighbours_ = neighbours;
  // @@protoc_insertion_point(field_set_allocated:message.RoutingUpdate.neighbours)
}

// repeated .message.RoutingUpdate.RoutingEntry routingEntires = 5;
inline int RoutingUpdate::_internal_routingentires_size() const {
  return routingentires_.size();
}
inline int RoutingUpdate::routingentires_size() const {
  return _internal_routingentires_size();
}
inline void RoutingUpdate::clear_routingentires() {
  routingentires_.Clear();
}
inline ::message::RoutingUpdate_RoutingEntry* RoutingUpdate::mutable_routingentires(int index) {
  // @@protoc_insertion_point(field_mutable:message.RoutingUpdate.routingEntires)
  return routingentires_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::RoutingUpdate_RoutingEntry >*
RoutingUpdate::mutable_routingentires() {
  // @@protoc_insertion_point(field_mutable_list:message.RoutingUpdate.routingEntires)
  return &routingentires_;
}
inline const ::message::RoutingUpdate_RoutingEntry& RoutingUpdate::_internal_routingentires(int index) const {
  return routingentires_.Get(index);
}
inline const ::message::RoutingUpdate_RoutingEntry& RoutingUpdate::routingentires(int index) const {
  // @@protoc_insertion_point(field_get:message.RoutingUpdate.routingEntires)
  return _internal_routingentires(index);
}
inline ::message::RoutingUpdate_RoutingEntry* RoutingUpdate::_internal_add_routingentires() {
  return routingentires_.Add();
}
inline ::message::RoutingUpdate_RoutingEntry* RoutingUpdate::add_routingentires() {
  // @@protoc_insertion_point(field_add:message.RoutingUpdate.routingEntires)
  return _internal_add_routingentires();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::RoutingUpdate_RoutingEntry >&
RoutingUpdate::routingentires() const {
  // @@protoc_insertion_point(field_list:message.RoutingUpdate.routingEntires)
  return routingentires_;
}

// int32 prefix_match = 6;
inline void RoutingUpdate::clear_prefix_match() {
  prefix_match_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoutingUpdate::_internal_prefix_match() const {
  return prefix_match_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoutingUpdate::prefix_match() const {
  // @@protoc_insertion_point(field_get:message.RoutingUpdate.prefix_match)
  return _internal_prefix_match();
}
inline void RoutingUpdate::_internal_set_prefix_match(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prefix_match_ = value;
}
inline void RoutingUpdate::set_prefix_match(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prefix_match(value);
  // @@protoc_insertion_point(field_set:message.RoutingUpdate.prefix_match)
}

// -------------------------------------------------------------------

// AllStateUpdate

// .message.List leaf = 1;
inline bool AllStateUpdate::_internal_has_leaf() const {
  return this != internal_default_instance() && leaf_ != nullptr;
}
inline bool AllStateUpdate::has_leaf() const {
  return _internal_has_leaf();
}
inline void AllStateUpdate::clear_leaf() {
  if (GetArena() == nullptr && leaf_ != nullptr) {
    delete leaf_;
  }
  leaf_ = nullptr;
}
inline const ::message::List& AllStateUpdate::_internal_leaf() const {
  const ::message::List* p = leaf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::message::List*>(
      &::message::_List_default_instance_);
}
inline const ::message::List& AllStateUpdate::leaf() const {
  // @@protoc_insertion_point(field_get:message.AllStateUpdate.leaf)
  return _internal_leaf();
}
inline void AllStateUpdate::unsafe_arena_set_allocated_leaf(
    ::message::List* leaf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leaf_);
  }
  leaf_ = leaf;
  if (leaf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.AllStateUpdate.leaf)
}
inline ::message::List* AllStateUpdate::release_leaf() {
  
  ::message::List* temp = leaf_;
  leaf_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::message::List* AllStateUpdate::unsafe_arena_release_leaf() {
  // @@protoc_insertion_point(field_release:message.AllStateUpdate.leaf)
  
  ::message::List* temp = leaf_;
  leaf_ = nullptr;
  return temp;
}
inline ::message::List* AllStateUpdate::_internal_mutable_leaf() {
  
  if (leaf_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::List>(GetArena());
    leaf_ = p;
  }
  return leaf_;
}
inline ::message::List* AllStateUpdate::mutable_leaf() {
  // @@protoc_insertion_point(field_mutable:message.AllStateUpdate.leaf)
  return _internal_mutable_leaf();
}
inline void AllStateUpdate::set_allocated_leaf(::message::List* leaf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete leaf_;
  }
  if (leaf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(leaf);
    if (message_arena != submessage_arena) {
      leaf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leaf, submessage_arena);
    }
    
  } else {
    
  }
  leaf_ = leaf;
  // @@protoc_insertion_point(field_set_allocated:message.AllStateUpdate.leaf)
}

// repeated .message.List routingTable = 2;
inline int AllStateUpdate::_internal_routingtable_size() const {
  return routingtable_.size();
}
inline int AllStateUpdate::routingtable_size() const {
  return _internal_routingtable_size();
}
inline void AllStateUpdate::clear_routingtable() {
  routingtable_.Clear();
}
inline ::message::List* AllStateUpdate::mutable_routingtable(int index) {
  // @@protoc_insertion_point(field_mutable:message.AllStateUpdate.routingTable)
  return routingtable_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::List >*
AllStateUpdate::mutable_routingtable() {
  // @@protoc_insertion_point(field_mutable_list:message.AllStateUpdate.routingTable)
  return &routingtable_;
}
inline const ::message::List& AllStateUpdate::_internal_routingtable(int index) const {
  return routingtable_.Get(index);
}
inline const ::message::List& AllStateUpdate::routingtable(int index) const {
  // @@protoc_insertion_point(field_get:message.AllStateUpdate.routingTable)
  return _internal_routingtable(index);
}
inline ::message::List* AllStateUpdate::_internal_add_routingtable() {
  return routingtable_.Add();
}
inline ::message::List* AllStateUpdate::add_routingtable() {
  // @@protoc_insertion_point(field_add:message.AllStateUpdate.routingTable)
  return _internal_add_routingtable();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::List >&
AllStateUpdate::routingtable() const {
  // @@protoc_insertion_point(field_list:message.AllStateUpdate.routingTable)
  return routingtable_;
}

// .message.List neighbours = 3;
inline bool AllStateUpdate::_internal_has_neighbours() const {
  return this != internal_default_instance() && neighbours_ != nullptr;
}
inline bool AllStateUpdate::has_neighbours() const {
  return _internal_has_neighbours();
}
inline void AllStateUpdate::clear_neighbours() {
  if (GetArena() == nullptr && neighbours_ != nullptr) {
    delete neighbours_;
  }
  neighbours_ = nullptr;
}
inline const ::message::List& AllStateUpdate::_internal_neighbours() const {
  const ::message::List* p = neighbours_;
  return p != nullptr ? *p : *reinterpret_cast<const ::message::List*>(
      &::message::_List_default_instance_);
}
inline const ::message::List& AllStateUpdate::neighbours() const {
  // @@protoc_insertion_point(field_get:message.AllStateUpdate.neighbours)
  return _internal_neighbours();
}
inline void AllStateUpdate::unsafe_arena_set_allocated_neighbours(
    ::message::List* neighbours) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(neighbours_);
  }
  neighbours_ = neighbours;
  if (neighbours) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.AllStateUpdate.neighbours)
}
inline ::message::List* AllStateUpdate::release_neighbours() {
  
  ::message::List* temp = neighbours_;
  neighbours_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::message::List* AllStateUpdate::unsafe_arena_release_neighbours() {
  // @@protoc_insertion_point(field_release:message.AllStateUpdate.neighbours)
  
  ::message::List* temp = neighbours_;
  neighbours_ = nullptr;
  return temp;
}
inline ::message::List* AllStateUpdate::_internal_mutable_neighbours() {
  
  if (neighbours_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::List>(GetArena());
    neighbours_ = p;
  }
  return neighbours_;
}
inline ::message::List* AllStateUpdate::mutable_neighbours() {
  // @@protoc_insertion_point(field_mutable:message.AllStateUpdate.neighbours)
  return _internal_mutable_neighbours();
}
inline void AllStateUpdate::set_allocated_neighbours(::message::List* neighbours) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete neighbours_;
  }
  if (neighbours) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(neighbours);
    if (message_arena != submessage_arena) {
      neighbours = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, neighbours, submessage_arena);
    }
    
  } else {
    
  }
  neighbours_ = neighbours;
  // @@protoc_insertion_point(field_set_allocated:message.AllStateUpdate.neighbours)
}

// -------------------------------------------------------------------

// GetVal

// string key = 1;
inline void GetVal::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetVal::key() const {
  // @@protoc_insertion_point(field_get:message.GetVal.key)
  return _internal_key();
}
inline void GetVal::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:message.GetVal.key)
}
inline std::string* GetVal::mutable_key() {
  // @@protoc_insertion_point(field_mutable:message.GetVal.key)
  return _internal_mutable_key();
}
inline const std::string& GetVal::_internal_key() const {
  return key_.Get();
}
inline void GetVal::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetVal::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.GetVal.key)
}
inline void GetVal::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.GetVal.key)
}
inline void GetVal::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.GetVal.key)
}
inline std::string* GetVal::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetVal::release_key() {
  // @@protoc_insertion_point(field_release:message.GetVal.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetVal::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.GetVal.key)
}

// .message.Node node = 2;
inline bool GetVal::_internal_has_node() const {
  return this != internal_default_instance() && node_ != nullptr;
}
inline bool GetVal::has_node() const {
  return _internal_has_node();
}
inline void GetVal::clear_node() {
  if (GetArena() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
}
inline const ::message::Node& GetVal::_internal_node() const {
  const ::message::Node* p = node_;
  return p != nullptr ? *p : *reinterpret_cast<const ::message::Node*>(
      &::message::_Node_default_instance_);
}
inline const ::message::Node& GetVal::node() const {
  // @@protoc_insertion_point(field_get:message.GetVal.node)
  return _internal_node();
}
inline void GetVal::unsafe_arena_set_allocated_node(
    ::message::Node* node) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.GetVal.node)
}
inline ::message::Node* GetVal::release_node() {
  
  ::message::Node* temp = node_;
  node_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::message::Node* GetVal::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:message.GetVal.node)
  
  ::message::Node* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::message::Node* GetVal::_internal_mutable_node() {
  
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::Node>(GetArena());
    node_ = p;
  }
  return node_;
}
inline ::message::Node* GetVal::mutable_node() {
  // @@protoc_insertion_point(field_mutable:message.GetVal.node)
  return _internal_mutable_node();
}
inline void GetVal::set_allocated_node(::message::Node* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete node_;
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(node);
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:message.GetVal.node)
}

// string actual_key = 3;
inline void GetVal::clear_actual_key() {
  actual_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetVal::actual_key() const {
  // @@protoc_insertion_point(field_get:message.GetVal.actual_key)
  return _internal_actual_key();
}
inline void GetVal::set_actual_key(const std::string& value) {
  _internal_set_actual_key(value);
  // @@protoc_insertion_point(field_set:message.GetVal.actual_key)
}
inline std::string* GetVal::mutable_actual_key() {
  // @@protoc_insertion_point(field_mutable:message.GetVal.actual_key)
  return _internal_mutable_actual_key();
}
inline const std::string& GetVal::_internal_actual_key() const {
  return actual_key_.Get();
}
inline void GetVal::_internal_set_actual_key(const std::string& value) {
  
  actual_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetVal::set_actual_key(std::string&& value) {
  
  actual_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.GetVal.actual_key)
}
inline void GetVal::set_actual_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actual_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.GetVal.actual_key)
}
inline void GetVal::set_actual_key(const char* value,
    size_t size) {
  
  actual_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.GetVal.actual_key)
}
inline std::string* GetVal::_internal_mutable_actual_key() {
  
  return actual_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetVal::release_actual_key() {
  // @@protoc_insertion_point(field_release:message.GetVal.actual_key)
  return actual_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetVal::set_allocated_actual_key(std::string* actual_key) {
  if (actual_key != nullptr) {
    
  } else {
    
  }
  actual_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actual_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.GetVal.actual_key)
}

// -------------------------------------------------------------------

// GetValResponse

// string key = 1;
inline void GetValResponse::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetValResponse::key() const {
  // @@protoc_insertion_point(field_get:message.GetValResponse.key)
  return _internal_key();
}
inline void GetValResponse::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:message.GetValResponse.key)
}
inline std::string* GetValResponse::mutable_key() {
  // @@protoc_insertion_point(field_mutable:message.GetValResponse.key)
  return _internal_mutable_key();
}
inline const std::string& GetValResponse::_internal_key() const {
  return key_.Get();
}
inline void GetValResponse::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetValResponse::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.GetValResponse.key)
}
inline void GetValResponse::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.GetValResponse.key)
}
inline void GetValResponse::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.GetValResponse.key)
}
inline std::string* GetValResponse::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetValResponse::release_key() {
  // @@protoc_insertion_point(field_release:message.GetValResponse.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetValResponse::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.GetValResponse.key)
}

// string value = 2;
inline void GetValResponse::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetValResponse::value() const {
  // @@protoc_insertion_point(field_get:message.GetValResponse.value)
  return _internal_value();
}
inline void GetValResponse::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:message.GetValResponse.value)
}
inline std::string* GetValResponse::mutable_value() {
  // @@protoc_insertion_point(field_mutable:message.GetValResponse.value)
  return _internal_mutable_value();
}
inline const std::string& GetValResponse::_internal_value() const {
  return value_.Get();
}
inline void GetValResponse::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetValResponse::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.GetValResponse.value)
}
inline void GetValResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.GetValResponse.value)
}
inline void GetValResponse::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.GetValResponse.value)
}
inline std::string* GetValResponse::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetValResponse::release_value() {
  // @@protoc_insertion_point(field_release:message.GetValResponse.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetValResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.GetValResponse.value)
}

// string actual_key = 3;
inline void GetValResponse::clear_actual_key() {
  actual_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetValResponse::actual_key() const {
  // @@protoc_insertion_point(field_get:message.GetValResponse.actual_key)
  return _internal_actual_key();
}
inline void GetValResponse::set_actual_key(const std::string& value) {
  _internal_set_actual_key(value);
  // @@protoc_insertion_point(field_set:message.GetValResponse.actual_key)
}
inline std::string* GetValResponse::mutable_actual_key() {
  // @@protoc_insertion_point(field_mutable:message.GetValResponse.actual_key)
  return _internal_mutable_actual_key();
}
inline const std::string& GetValResponse::_internal_actual_key() const {
  return actual_key_.Get();
}
inline void GetValResponse::_internal_set_actual_key(const std::string& value) {
  
  actual_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetValResponse::set_actual_key(std::string&& value) {
  
  actual_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.GetValResponse.actual_key)
}
inline void GetValResponse::set_actual_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actual_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.GetValResponse.actual_key)
}
inline void GetValResponse::set_actual_key(const char* value,
    size_t size) {
  
  actual_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.GetValResponse.actual_key)
}
inline std::string* GetValResponse::_internal_mutable_actual_key() {
  
  return actual_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetValResponse::release_actual_key() {
  // @@protoc_insertion_point(field_release:message.GetValResponse.actual_key)
  return actual_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetValResponse::set_allocated_actual_key(std::string* actual_key) {
  if (actual_key != nullptr) {
    
  } else {
    
  }
  actual_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actual_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.GetValResponse.actual_key)
}

// -------------------------------------------------------------------

// SetVal

// string key = 1;
inline void SetVal::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetVal::key() const {
  // @@protoc_insertion_point(field_get:message.SetVal.key)
  return _internal_key();
}
inline void SetVal::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:message.SetVal.key)
}
inline std::string* SetVal::mutable_key() {
  // @@protoc_insertion_point(field_mutable:message.SetVal.key)
  return _internal_mutable_key();
}
inline const std::string& SetVal::_internal_key() const {
  return key_.Get();
}
inline void SetVal::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetVal::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.SetVal.key)
}
inline void SetVal::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.SetVal.key)
}
inline void SetVal::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.SetVal.key)
}
inline std::string* SetVal::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetVal::release_key() {
  // @@protoc_insertion_point(field_release:message.SetVal.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetVal::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.SetVal.key)
}

// string val = 2;
inline void SetVal::clear_val() {
  val_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetVal::val() const {
  // @@protoc_insertion_point(field_get:message.SetVal.val)
  return _internal_val();
}
inline void SetVal::set_val(const std::string& value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:message.SetVal.val)
}
inline std::string* SetVal::mutable_val() {
  // @@protoc_insertion_point(field_mutable:message.SetVal.val)
  return _internal_mutable_val();
}
inline const std::string& SetVal::_internal_val() const {
  return val_.Get();
}
inline void SetVal::_internal_set_val(const std::string& value) {
  
  val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetVal::set_val(std::string&& value) {
  
  val_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.SetVal.val)
}
inline void SetVal::set_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.SetVal.val)
}
inline void SetVal::set_val(const char* value,
    size_t size) {
  
  val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.SetVal.val)
}
inline std::string* SetVal::_internal_mutable_val() {
  
  return val_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetVal::release_val() {
  // @@protoc_insertion_point(field_release:message.SetVal.val)
  return val_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetVal::set_allocated_val(std::string* val) {
  if (val != nullptr) {
    
  } else {
    
  }
  val_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), val,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.SetVal.val)
}

// .message.Node node = 3;
inline bool SetVal::_internal_has_node() const {
  return this != internal_default_instance() && node_ != nullptr;
}
inline bool SetVal::has_node() const {
  return _internal_has_node();
}
inline void SetVal::clear_node() {
  if (GetArena() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
}
inline const ::message::Node& SetVal::_internal_node() const {
  const ::message::Node* p = node_;
  return p != nullptr ? *p : *reinterpret_cast<const ::message::Node*>(
      &::message::_Node_default_instance_);
}
inline const ::message::Node& SetVal::node() const {
  // @@protoc_insertion_point(field_get:message.SetVal.node)
  return _internal_node();
}
inline void SetVal::unsafe_arena_set_allocated_node(
    ::message::Node* node) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.SetVal.node)
}
inline ::message::Node* SetVal::release_node() {
  
  ::message::Node* temp = node_;
  node_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::message::Node* SetVal::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:message.SetVal.node)
  
  ::message::Node* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::message::Node* SetVal::_internal_mutable_node() {
  
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::Node>(GetArena());
    node_ = p;
  }
  return node_;
}
inline ::message::Node* SetVal::mutable_node() {
  // @@protoc_insertion_point(field_mutable:message.SetVal.node)
  return _internal_mutable_node();
}
inline void SetVal::set_allocated_node(::message::Node* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete node_;
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(node);
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:message.SetVal.node)
}

// bool terminal = 4;
inline void SetVal::clear_terminal() {
  terminal_ = false;
}
inline bool SetVal::_internal_terminal() const {
  return terminal_;
}
inline bool SetVal::terminal() const {
  // @@protoc_insertion_point(field_get:message.SetVal.terminal)
  return _internal_terminal();
}
inline void SetVal::_internal_set_terminal(bool value) {
  
  terminal_ = value;
}
inline void SetVal::set_terminal(bool value) {
  _internal_set_terminal(value);
  // @@protoc_insertion_point(field_set:message.SetVal.terminal)
}

// -------------------------------------------------------------------

// Message

// string type = 1;
inline void Message::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message::type() const {
  // @@protoc_insertion_point(field_get:message.Message.type)
  return _internal_type();
}
inline void Message::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:message.Message.type)
}
inline std::string* Message::mutable_type() {
  // @@protoc_insertion_point(field_mutable:message.Message.type)
  return _internal_mutable_type();
}
inline const std::string& Message::_internal_type() const {
  return type_.Get();
}
inline void Message::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.Message.type)
}
inline void Message::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.Message.type)
}
inline void Message::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.Message.type)
}
inline std::string* Message::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message::release_type() {
  // @@protoc_insertion_point(field_release:message.Message.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.Message.type)
}

// .message.Node sender = 2;
inline bool Message::_internal_has_sender() const {
  return this != internal_default_instance() && sender_ != nullptr;
}
inline bool Message::has_sender() const {
  return _internal_has_sender();
}
inline void Message::clear_sender() {
  if (GetArena() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
}
inline const ::message::Node& Message::_internal_sender() const {
  const ::message::Node* p = sender_;
  return p != nullptr ? *p : *reinterpret_cast<const ::message::Node*>(
      &::message::_Node_default_instance_);
}
inline const ::message::Node& Message::sender() const {
  // @@protoc_insertion_point(field_get:message.Message.sender)
  return _internal_sender();
}
inline void Message::unsafe_arena_set_allocated_sender(
    ::message::Node* sender) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_);
  }
  sender_ = sender;
  if (sender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.Message.sender)
}
inline ::message::Node* Message::release_sender() {
  
  ::message::Node* temp = sender_;
  sender_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::message::Node* Message::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:message.Message.sender)
  
  ::message::Node* temp = sender_;
  sender_ = nullptr;
  return temp;
}
inline ::message::Node* Message::_internal_mutable_sender() {
  
  if (sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::Node>(GetArena());
    sender_ = p;
  }
  return sender_;
}
inline ::message::Node* Message::mutable_sender() {
  // @@protoc_insertion_point(field_mutable:message.Message.sender)
  return _internal_mutable_sender();
}
inline void Message::set_allocated_sender(::message::Node* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sender_;
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sender);
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:message.Message.sender)
}

// .message.JoinMe joinMeMsg = 3;
inline bool Message::_internal_has_joinmemsg() const {
  return msg_case() == kJoinMeMsg;
}
inline bool Message::has_joinmemsg() const {
  return _internal_has_joinmemsg();
}
inline void Message::set_has_joinmemsg() {
  _oneof_case_[0] = kJoinMeMsg;
}
inline void Message::clear_joinmemsg() {
  if (_internal_has_joinmemsg()) {
    if (GetArena() == nullptr) {
      delete msg_.joinmemsg_;
    }
    clear_has_msg();
  }
}
inline ::message::JoinMe* Message::release_joinmemsg() {
  // @@protoc_insertion_point(field_release:message.Message.joinMeMsg)
  if (_internal_has_joinmemsg()) {
    clear_has_msg();
      ::message::JoinMe* temp = msg_.joinmemsg_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.joinmemsg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::message::JoinMe& Message::_internal_joinmemsg() const {
  return _internal_has_joinmemsg()
      ? *msg_.joinmemsg_
      : *reinterpret_cast< ::message::JoinMe*>(&::message::_JoinMe_default_instance_);
}
inline const ::message::JoinMe& Message::joinmemsg() const {
  // @@protoc_insertion_point(field_get:message.Message.joinMeMsg)
  return _internal_joinmemsg();
}
inline ::message::JoinMe* Message::unsafe_arena_release_joinmemsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:message.Message.joinMeMsg)
  if (_internal_has_joinmemsg()) {
    clear_has_msg();
    ::message::JoinMe* temp = msg_.joinmemsg_;
    msg_.joinmemsg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_joinmemsg(::message::JoinMe* joinmemsg) {
  clear_msg();
  if (joinmemsg) {
    set_has_joinmemsg();
    msg_.joinmemsg_ = joinmemsg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.Message.joinMeMsg)
}
inline ::message::JoinMe* Message::_internal_mutable_joinmemsg() {
  if (!_internal_has_joinmemsg()) {
    clear_msg();
    set_has_joinmemsg();
    msg_.joinmemsg_ = CreateMaybeMessage< ::message::JoinMe >(GetArena());
  }
  return msg_.joinmemsg_;
}
inline ::message::JoinMe* Message::mutable_joinmemsg() {
  // @@protoc_insertion_point(field_mutable:message.Message.joinMeMsg)
  return _internal_mutable_joinmemsg();
}

// .message.Join joinMsg = 4;
inline bool Message::_internal_has_joinmsg() const {
  return msg_case() == kJoinMsg;
}
inline bool Message::has_joinmsg() const {
  return _internal_has_joinmsg();
}
inline void Message::set_has_joinmsg() {
  _oneof_case_[0] = kJoinMsg;
}
inline void Message::clear_joinmsg() {
  if (_internal_has_joinmsg()) {
    if (GetArena() == nullptr) {
      delete msg_.joinmsg_;
    }
    clear_has_msg();
  }
}
inline ::message::Join* Message::release_joinmsg() {
  // @@protoc_insertion_point(field_release:message.Message.joinMsg)
  if (_internal_has_joinmsg()) {
    clear_has_msg();
      ::message::Join* temp = msg_.joinmsg_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.joinmsg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::message::Join& Message::_internal_joinmsg() const {
  return _internal_has_joinmsg()
      ? *msg_.joinmsg_
      : *reinterpret_cast< ::message::Join*>(&::message::_Join_default_instance_);
}
inline const ::message::Join& Message::joinmsg() const {
  // @@protoc_insertion_point(field_get:message.Message.joinMsg)
  return _internal_joinmsg();
}
inline ::message::Join* Message::unsafe_arena_release_joinmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:message.Message.joinMsg)
  if (_internal_has_joinmsg()) {
    clear_has_msg();
    ::message::Join* temp = msg_.joinmsg_;
    msg_.joinmsg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_joinmsg(::message::Join* joinmsg) {
  clear_msg();
  if (joinmsg) {
    set_has_joinmsg();
    msg_.joinmsg_ = joinmsg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.Message.joinMsg)
}
inline ::message::Join* Message::_internal_mutable_joinmsg() {
  if (!_internal_has_joinmsg()) {
    clear_msg();
    set_has_joinmsg();
    msg_.joinmsg_ = CreateMaybeMessage< ::message::Join >(GetArena());
  }
  return msg_.joinmsg_;
}
inline ::message::Join* Message::mutable_joinmsg() {
  // @@protoc_insertion_point(field_mutable:message.Message.joinMsg)
  return _internal_mutable_joinmsg();
}

// .message.GetVal getValMsg = 5;
inline bool Message::_internal_has_getvalmsg() const {
  return msg_case() == kGetValMsg;
}
inline bool Message::has_getvalmsg() const {
  return _internal_has_getvalmsg();
}
inline void Message::set_has_getvalmsg() {
  _oneof_case_[0] = kGetValMsg;
}
inline void Message::clear_getvalmsg() {
  if (_internal_has_getvalmsg()) {
    if (GetArena() == nullptr) {
      delete msg_.getvalmsg_;
    }
    clear_has_msg();
  }
}
inline ::message::GetVal* Message::release_getvalmsg() {
  // @@protoc_insertion_point(field_release:message.Message.getValMsg)
  if (_internal_has_getvalmsg()) {
    clear_has_msg();
      ::message::GetVal* temp = msg_.getvalmsg_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.getvalmsg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::message::GetVal& Message::_internal_getvalmsg() const {
  return _internal_has_getvalmsg()
      ? *msg_.getvalmsg_
      : *reinterpret_cast< ::message::GetVal*>(&::message::_GetVal_default_instance_);
}
inline const ::message::GetVal& Message::getvalmsg() const {
  // @@protoc_insertion_point(field_get:message.Message.getValMsg)
  return _internal_getvalmsg();
}
inline ::message::GetVal* Message::unsafe_arena_release_getvalmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:message.Message.getValMsg)
  if (_internal_has_getvalmsg()) {
    clear_has_msg();
    ::message::GetVal* temp = msg_.getvalmsg_;
    msg_.getvalmsg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_getvalmsg(::message::GetVal* getvalmsg) {
  clear_msg();
  if (getvalmsg) {
    set_has_getvalmsg();
    msg_.getvalmsg_ = getvalmsg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.Message.getValMsg)
}
inline ::message::GetVal* Message::_internal_mutable_getvalmsg() {
  if (!_internal_has_getvalmsg()) {
    clear_msg();
    set_has_getvalmsg();
    msg_.getvalmsg_ = CreateMaybeMessage< ::message::GetVal >(GetArena());
  }
  return msg_.getvalmsg_;
}
inline ::message::GetVal* Message::mutable_getvalmsg() {
  // @@protoc_insertion_point(field_mutable:message.Message.getValMsg)
  return _internal_mutable_getvalmsg();
}

// .message.SetVal setValMsg = 6;
inline bool Message::_internal_has_setvalmsg() const {
  return msg_case() == kSetValMsg;
}
inline bool Message::has_setvalmsg() const {
  return _internal_has_setvalmsg();
}
inline void Message::set_has_setvalmsg() {
  _oneof_case_[0] = kSetValMsg;
}
inline void Message::clear_setvalmsg() {
  if (_internal_has_setvalmsg()) {
    if (GetArena() == nullptr) {
      delete msg_.setvalmsg_;
    }
    clear_has_msg();
  }
}
inline ::message::SetVal* Message::release_setvalmsg() {
  // @@protoc_insertion_point(field_release:message.Message.setValMsg)
  if (_internal_has_setvalmsg()) {
    clear_has_msg();
      ::message::SetVal* temp = msg_.setvalmsg_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.setvalmsg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::message::SetVal& Message::_internal_setvalmsg() const {
  return _internal_has_setvalmsg()
      ? *msg_.setvalmsg_
      : *reinterpret_cast< ::message::SetVal*>(&::message::_SetVal_default_instance_);
}
inline const ::message::SetVal& Message::setvalmsg() const {
  // @@protoc_insertion_point(field_get:message.Message.setValMsg)
  return _internal_setvalmsg();
}
inline ::message::SetVal* Message::unsafe_arena_release_setvalmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:message.Message.setValMsg)
  if (_internal_has_setvalmsg()) {
    clear_has_msg();
    ::message::SetVal* temp = msg_.setvalmsg_;
    msg_.setvalmsg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_setvalmsg(::message::SetVal* setvalmsg) {
  clear_msg();
  if (setvalmsg) {
    set_has_setvalmsg();
    msg_.setvalmsg_ = setvalmsg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.Message.setValMsg)
}
inline ::message::SetVal* Message::_internal_mutable_setvalmsg() {
  if (!_internal_has_setvalmsg()) {
    clear_msg();
    set_has_setvalmsg();
    msg_.setvalmsg_ = CreateMaybeMessage< ::message::SetVal >(GetArena());
  }
  return msg_.setvalmsg_;
}
inline ::message::SetVal* Message::mutable_setvalmsg() {
  // @@protoc_insertion_point(field_mutable:message.Message.setValMsg)
  return _internal_mutable_setvalmsg();
}

// .message.RoutingUpdate routingUpdate = 7;
inline bool Message::_internal_has_routingupdate() const {
  return msg_case() == kRoutingUpdate;
}
inline bool Message::has_routingupdate() const {
  return _internal_has_routingupdate();
}
inline void Message::set_has_routingupdate() {
  _oneof_case_[0] = kRoutingUpdate;
}
inline void Message::clear_routingupdate() {
  if (_internal_has_routingupdate()) {
    if (GetArena() == nullptr) {
      delete msg_.routingupdate_;
    }
    clear_has_msg();
  }
}
inline ::message::RoutingUpdate* Message::release_routingupdate() {
  // @@protoc_insertion_point(field_release:message.Message.routingUpdate)
  if (_internal_has_routingupdate()) {
    clear_has_msg();
      ::message::RoutingUpdate* temp = msg_.routingupdate_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.routingupdate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::message::RoutingUpdate& Message::_internal_routingupdate() const {
  return _internal_has_routingupdate()
      ? *msg_.routingupdate_
      : *reinterpret_cast< ::message::RoutingUpdate*>(&::message::_RoutingUpdate_default_instance_);
}
inline const ::message::RoutingUpdate& Message::routingupdate() const {
  // @@protoc_insertion_point(field_get:message.Message.routingUpdate)
  return _internal_routingupdate();
}
inline ::message::RoutingUpdate* Message::unsafe_arena_release_routingupdate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:message.Message.routingUpdate)
  if (_internal_has_routingupdate()) {
    clear_has_msg();
    ::message::RoutingUpdate* temp = msg_.routingupdate_;
    msg_.routingupdate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_routingupdate(::message::RoutingUpdate* routingupdate) {
  clear_msg();
  if (routingupdate) {
    set_has_routingupdate();
    msg_.routingupdate_ = routingupdate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.Message.routingUpdate)
}
inline ::message::RoutingUpdate* Message::_internal_mutable_routingupdate() {
  if (!_internal_has_routingupdate()) {
    clear_msg();
    set_has_routingupdate();
    msg_.routingupdate_ = CreateMaybeMessage< ::message::RoutingUpdate >(GetArena());
  }
  return msg_.routingupdate_;
}
inline ::message::RoutingUpdate* Message::mutable_routingupdate() {
  // @@protoc_insertion_point(field_mutable:message.Message.routingUpdate)
  return _internal_mutable_routingupdate();
}

// .message.AllStateUpdate allStateUpdate = 8;
inline bool Message::_internal_has_allstateupdate() const {
  return msg_case() == kAllStateUpdate;
}
inline bool Message::has_allstateupdate() const {
  return _internal_has_allstateupdate();
}
inline void Message::set_has_allstateupdate() {
  _oneof_case_[0] = kAllStateUpdate;
}
inline void Message::clear_allstateupdate() {
  if (_internal_has_allstateupdate()) {
    if (GetArena() == nullptr) {
      delete msg_.allstateupdate_;
    }
    clear_has_msg();
  }
}
inline ::message::AllStateUpdate* Message::release_allstateupdate() {
  // @@protoc_insertion_point(field_release:message.Message.allStateUpdate)
  if (_internal_has_allstateupdate()) {
    clear_has_msg();
      ::message::AllStateUpdate* temp = msg_.allstateupdate_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.allstateupdate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::message::AllStateUpdate& Message::_internal_allstateupdate() const {
  return _internal_has_allstateupdate()
      ? *msg_.allstateupdate_
      : *reinterpret_cast< ::message::AllStateUpdate*>(&::message::_AllStateUpdate_default_instance_);
}
inline const ::message::AllStateUpdate& Message::allstateupdate() const {
  // @@protoc_insertion_point(field_get:message.Message.allStateUpdate)
  return _internal_allstateupdate();
}
inline ::message::AllStateUpdate* Message::unsafe_arena_release_allstateupdate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:message.Message.allStateUpdate)
  if (_internal_has_allstateupdate()) {
    clear_has_msg();
    ::message::AllStateUpdate* temp = msg_.allstateupdate_;
    msg_.allstateupdate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_allstateupdate(::message::AllStateUpdate* allstateupdate) {
  clear_msg();
  if (allstateupdate) {
    set_has_allstateupdate();
    msg_.allstateupdate_ = allstateupdate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.Message.allStateUpdate)
}
inline ::message::AllStateUpdate* Message::_internal_mutable_allstateupdate() {
  if (!_internal_has_allstateupdate()) {
    clear_msg();
    set_has_allstateupdate();
    msg_.allstateupdate_ = CreateMaybeMessage< ::message::AllStateUpdate >(GetArena());
  }
  return msg_.allstateupdate_;
}
inline ::message::AllStateUpdate* Message::mutable_allstateupdate() {
  // @@protoc_insertion_point(field_mutable:message.Message.allStateUpdate)
  return _internal_mutable_allstateupdate();
}

// .message.GetValResponse getValResponse = 9;
inline bool Message::_internal_has_getvalresponse() const {
  return msg_case() == kGetValResponse;
}
inline bool Message::has_getvalresponse() const {
  return _internal_has_getvalresponse();
}
inline void Message::set_has_getvalresponse() {
  _oneof_case_[0] = kGetValResponse;
}
inline void Message::clear_getvalresponse() {
  if (_internal_has_getvalresponse()) {
    if (GetArena() == nullptr) {
      delete msg_.getvalresponse_;
    }
    clear_has_msg();
  }
}
inline ::message::GetValResponse* Message::release_getvalresponse() {
  // @@protoc_insertion_point(field_release:message.Message.getValResponse)
  if (_internal_has_getvalresponse()) {
    clear_has_msg();
      ::message::GetValResponse* temp = msg_.getvalresponse_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.getvalresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::message::GetValResponse& Message::_internal_getvalresponse() const {
  return _internal_has_getvalresponse()
      ? *msg_.getvalresponse_
      : *reinterpret_cast< ::message::GetValResponse*>(&::message::_GetValResponse_default_instance_);
}
inline const ::message::GetValResponse& Message::getvalresponse() const {
  // @@protoc_insertion_point(field_get:message.Message.getValResponse)
  return _internal_getvalresponse();
}
inline ::message::GetValResponse* Message::unsafe_arena_release_getvalresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:message.Message.getValResponse)
  if (_internal_has_getvalresponse()) {
    clear_has_msg();
    ::message::GetValResponse* temp = msg_.getvalresponse_;
    msg_.getvalresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_getvalresponse(::message::GetValResponse* getvalresponse) {
  clear_msg();
  if (getvalresponse) {
    set_has_getvalresponse();
    msg_.getvalresponse_ = getvalresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.Message.getValResponse)
}
inline ::message::GetValResponse* Message::_internal_mutable_getvalresponse() {
  if (!_internal_has_getvalresponse()) {
    clear_msg();
    set_has_getvalresponse();
    msg_.getvalresponse_ = CreateMaybeMessage< ::message::GetValResponse >(GetArena());
  }
  return msg_.getvalresponse_;
}
inline ::message::GetValResponse* Message::mutable_getvalresponse() {
  // @@protoc_insertion_point(field_mutable:message.Message.getValResponse)
  return _internal_mutable_getvalresponse();
}

// .message.DeleteNode deleteNode = 10;
inline bool Message::_internal_has_deletenode() const {
  return msg_case() == kDeleteNode;
}
inline bool Message::has_deletenode() const {
  return _internal_has_deletenode();
}
inline void Message::set_has_deletenode() {
  _oneof_case_[0] = kDeleteNode;
}
inline void Message::clear_deletenode() {
  if (_internal_has_deletenode()) {
    if (GetArena() == nullptr) {
      delete msg_.deletenode_;
    }
    clear_has_msg();
  }
}
inline ::message::DeleteNode* Message::release_deletenode() {
  // @@protoc_insertion_point(field_release:message.Message.deleteNode)
  if (_internal_has_deletenode()) {
    clear_has_msg();
      ::message::DeleteNode* temp = msg_.deletenode_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.deletenode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::message::DeleteNode& Message::_internal_deletenode() const {
  return _internal_has_deletenode()
      ? *msg_.deletenode_
      : *reinterpret_cast< ::message::DeleteNode*>(&::message::_DeleteNode_default_instance_);
}
inline const ::message::DeleteNode& Message::deletenode() const {
  // @@protoc_insertion_point(field_get:message.Message.deleteNode)
  return _internal_deletenode();
}
inline ::message::DeleteNode* Message::unsafe_arena_release_deletenode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:message.Message.deleteNode)
  if (_internal_has_deletenode()) {
    clear_has_msg();
    ::message::DeleteNode* temp = msg_.deletenode_;
    msg_.deletenode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_deletenode(::message::DeleteNode* deletenode) {
  clear_msg();
  if (deletenode) {
    set_has_deletenode();
    msg_.deletenode_ = deletenode;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.Message.deleteNode)
}
inline ::message::DeleteNode* Message::_internal_mutable_deletenode() {
  if (!_internal_has_deletenode()) {
    clear_msg();
    set_has_deletenode();
    msg_.deletenode_ = CreateMaybeMessage< ::message::DeleteNode >(GetArena());
  }
  return msg_.deletenode_;
}
inline ::message::DeleteNode* Message::mutable_deletenode() {
  // @@protoc_insertion_point(field_mutable:message.Message.deleteNode)
  return _internal_mutable_deletenode();
}

// .message.AddToHashTable addToHashTable = 11;
inline bool Message::_internal_has_addtohashtable() const {
  return msg_case() == kAddToHashTable;
}
inline bool Message::has_addtohashtable() const {
  return _internal_has_addtohashtable();
}
inline void Message::set_has_addtohashtable() {
  _oneof_case_[0] = kAddToHashTable;
}
inline void Message::clear_addtohashtable() {
  if (_internal_has_addtohashtable()) {
    if (GetArena() == nullptr) {
      delete msg_.addtohashtable_;
    }
    clear_has_msg();
  }
}
inline ::message::AddToHashTable* Message::release_addtohashtable() {
  // @@protoc_insertion_point(field_release:message.Message.addToHashTable)
  if (_internal_has_addtohashtable()) {
    clear_has_msg();
      ::message::AddToHashTable* temp = msg_.addtohashtable_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.addtohashtable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::message::AddToHashTable& Message::_internal_addtohashtable() const {
  return _internal_has_addtohashtable()
      ? *msg_.addtohashtable_
      : *reinterpret_cast< ::message::AddToHashTable*>(&::message::_AddToHashTable_default_instance_);
}
inline const ::message::AddToHashTable& Message::addtohashtable() const {
  // @@protoc_insertion_point(field_get:message.Message.addToHashTable)
  return _internal_addtohashtable();
}
inline ::message::AddToHashTable* Message::unsafe_arena_release_addtohashtable() {
  // @@protoc_insertion_point(field_unsafe_arena_release:message.Message.addToHashTable)
  if (_internal_has_addtohashtable()) {
    clear_has_msg();
    ::message::AddToHashTable* temp = msg_.addtohashtable_;
    msg_.addtohashtable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_addtohashtable(::message::AddToHashTable* addtohashtable) {
  clear_msg();
  if (addtohashtable) {
    set_has_addtohashtable();
    msg_.addtohashtable_ = addtohashtable;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.Message.addToHashTable)
}
inline ::message::AddToHashTable* Message::_internal_mutable_addtohashtable() {
  if (!_internal_has_addtohashtable()) {
    clear_msg();
    set_has_addtohashtable();
    msg_.addtohashtable_ = CreateMaybeMessage< ::message::AddToHashTable >(GetArena());
  }
  return msg_.addtohashtable_;
}
inline ::message::AddToHashTable* Message::mutable_addtohashtable() {
  // @@protoc_insertion_point(field_mutable:message.Message.addToHashTable)
  return _internal_mutable_addtohashtable();
}

// .message.ResponseLeafSet responseLeafSet = 12;
inline bool Message::_internal_has_responseleafset() const {
  return msg_case() == kResponseLeafSet;
}
inline bool Message::has_responseleafset() const {
  return _internal_has_responseleafset();
}
inline void Message::set_has_responseleafset() {
  _oneof_case_[0] = kResponseLeafSet;
}
inline void Message::clear_responseleafset() {
  if (_internal_has_responseleafset()) {
    if (GetArena() == nullptr) {
      delete msg_.responseleafset_;
    }
    clear_has_msg();
  }
}
inline ::message::ResponseLeafSet* Message::release_responseleafset() {
  // @@protoc_insertion_point(field_release:message.Message.responseLeafSet)
  if (_internal_has_responseleafset()) {
    clear_has_msg();
      ::message::ResponseLeafSet* temp = msg_.responseleafset_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.responseleafset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::message::ResponseLeafSet& Message::_internal_responseleafset() const {
  return _internal_has_responseleafset()
      ? *msg_.responseleafset_
      : *reinterpret_cast< ::message::ResponseLeafSet*>(&::message::_ResponseLeafSet_default_instance_);
}
inline const ::message::ResponseLeafSet& Message::responseleafset() const {
  // @@protoc_insertion_point(field_get:message.Message.responseLeafSet)
  return _internal_responseleafset();
}
inline ::message::ResponseLeafSet* Message::unsafe_arena_release_responseleafset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:message.Message.responseLeafSet)
  if (_internal_has_responseleafset()) {
    clear_has_msg();
    ::message::ResponseLeafSet* temp = msg_.responseleafset_;
    msg_.responseleafset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_responseleafset(::message::ResponseLeafSet* responseleafset) {
  clear_msg();
  if (responseleafset) {
    set_has_responseleafset();
    msg_.responseleafset_ = responseleafset;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.Message.responseLeafSet)
}
inline ::message::ResponseLeafSet* Message::_internal_mutable_responseleafset() {
  if (!_internal_has_responseleafset()) {
    clear_msg();
    set_has_responseleafset();
    msg_.responseleafset_ = CreateMaybeMessage< ::message::ResponseLeafSet >(GetArena());
  }
  return msg_.responseleafset_;
}
inline ::message::ResponseLeafSet* Message::mutable_responseleafset() {
  // @@protoc_insertion_point(field_mutable:message.Message.responseLeafSet)
  return _internal_mutable_responseleafset();
}

// .message.ResponseNeighbourSet responseNeighbourSet = 13;
inline bool Message::_internal_has_responseneighbourset() const {
  return msg_case() == kResponseNeighbourSet;
}
inline bool Message::has_responseneighbourset() const {
  return _internal_has_responseneighbourset();
}
inline void Message::set_has_responseneighbourset() {
  _oneof_case_[0] = kResponseNeighbourSet;
}
inline void Message::clear_responseneighbourset() {
  if (_internal_has_responseneighbourset()) {
    if (GetArena() == nullptr) {
      delete msg_.responseneighbourset_;
    }
    clear_has_msg();
  }
}
inline ::message::ResponseNeighbourSet* Message::release_responseneighbourset() {
  // @@protoc_insertion_point(field_release:message.Message.responseNeighbourSet)
  if (_internal_has_responseneighbourset()) {
    clear_has_msg();
      ::message::ResponseNeighbourSet* temp = msg_.responseneighbourset_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.responseneighbourset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::message::ResponseNeighbourSet& Message::_internal_responseneighbourset() const {
  return _internal_has_responseneighbourset()
      ? *msg_.responseneighbourset_
      : *reinterpret_cast< ::message::ResponseNeighbourSet*>(&::message::_ResponseNeighbourSet_default_instance_);
}
inline const ::message::ResponseNeighbourSet& Message::responseneighbourset() const {
  // @@protoc_insertion_point(field_get:message.Message.responseNeighbourSet)
  return _internal_responseneighbourset();
}
inline ::message::ResponseNeighbourSet* Message::unsafe_arena_release_responseneighbourset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:message.Message.responseNeighbourSet)
  if (_internal_has_responseneighbourset()) {
    clear_has_msg();
    ::message::ResponseNeighbourSet* temp = msg_.responseneighbourset_;
    msg_.responseneighbourset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_responseneighbourset(::message::ResponseNeighbourSet* responseneighbourset) {
  clear_msg();
  if (responseneighbourset) {
    set_has_responseneighbourset();
    msg_.responseneighbourset_ = responseneighbourset;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.Message.responseNeighbourSet)
}
inline ::message::ResponseNeighbourSet* Message::_internal_mutable_responseneighbourset() {
  if (!_internal_has_responseneighbourset()) {
    clear_msg();
    set_has_responseneighbourset();
    msg_.responseneighbourset_ = CreateMaybeMessage< ::message::ResponseNeighbourSet >(GetArena());
  }
  return msg_.responseneighbourset_;
}
inline ::message::ResponseNeighbourSet* Message::mutable_responseneighbourset() {
  // @@protoc_insertion_point(field_mutable:message.Message.responseNeighbourSet)
  return _internal_mutable_responseneighbourset();
}

// .message.RequestRoutingEntry requestRoutingEntry = 14;
inline bool Message::_internal_has_requestroutingentry() const {
  return msg_case() == kRequestRoutingEntry;
}
inline bool Message::has_requestroutingentry() const {
  return _internal_has_requestroutingentry();
}
inline void Message::set_has_requestroutingentry() {
  _oneof_case_[0] = kRequestRoutingEntry;
}
inline void Message::clear_requestroutingentry() {
  if (_internal_has_requestroutingentry()) {
    if (GetArena() == nullptr) {
      delete msg_.requestroutingentry_;
    }
    clear_has_msg();
  }
}
inline ::message::RequestRoutingEntry* Message::release_requestroutingentry() {
  // @@protoc_insertion_point(field_release:message.Message.requestRoutingEntry)
  if (_internal_has_requestroutingentry()) {
    clear_has_msg();
      ::message::RequestRoutingEntry* temp = msg_.requestroutingentry_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.requestroutingentry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::message::RequestRoutingEntry& Message::_internal_requestroutingentry() const {
  return _internal_has_requestroutingentry()
      ? *msg_.requestroutingentry_
      : *reinterpret_cast< ::message::RequestRoutingEntry*>(&::message::_RequestRoutingEntry_default_instance_);
}
inline const ::message::RequestRoutingEntry& Message::requestroutingentry() const {
  // @@protoc_insertion_point(field_get:message.Message.requestRoutingEntry)
  return _internal_requestroutingentry();
}
inline ::message::RequestRoutingEntry* Message::unsafe_arena_release_requestroutingentry() {
  // @@protoc_insertion_point(field_unsafe_arena_release:message.Message.requestRoutingEntry)
  if (_internal_has_requestroutingentry()) {
    clear_has_msg();
    ::message::RequestRoutingEntry* temp = msg_.requestroutingentry_;
    msg_.requestroutingentry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_requestroutingentry(::message::RequestRoutingEntry* requestroutingentry) {
  clear_msg();
  if (requestroutingentry) {
    set_has_requestroutingentry();
    msg_.requestroutingentry_ = requestroutingentry;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.Message.requestRoutingEntry)
}
inline ::message::RequestRoutingEntry* Message::_internal_mutable_requestroutingentry() {
  if (!_internal_has_requestroutingentry()) {
    clear_msg();
    set_has_requestroutingentry();
    msg_.requestroutingentry_ = CreateMaybeMessage< ::message::RequestRoutingEntry >(GetArena());
  }
  return msg_.requestroutingentry_;
}
inline ::message::RequestRoutingEntry* Message::mutable_requestroutingentry() {
  // @@protoc_insertion_point(field_mutable:message.Message.requestRoutingEntry)
  return _internal_mutable_requestroutingentry();
}

// .message.ResponseRoutingEntry responseRoutingEntry = 15;
inline bool Message::_internal_has_responseroutingentry() const {
  return msg_case() == kResponseRoutingEntry;
}
inline bool Message::has_responseroutingentry() const {
  return _internal_has_responseroutingentry();
}
inline void Message::set_has_responseroutingentry() {
  _oneof_case_[0] = kResponseRoutingEntry;
}
inline void Message::clear_responseroutingentry() {
  if (_internal_has_responseroutingentry()) {
    if (GetArena() == nullptr) {
      delete msg_.responseroutingentry_;
    }
    clear_has_msg();
  }
}
inline ::message::ResponseRoutingEntry* Message::release_responseroutingentry() {
  // @@protoc_insertion_point(field_release:message.Message.responseRoutingEntry)
  if (_internal_has_responseroutingentry()) {
    clear_has_msg();
      ::message::ResponseRoutingEntry* temp = msg_.responseroutingentry_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.responseroutingentry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::message::ResponseRoutingEntry& Message::_internal_responseroutingentry() const {
  return _internal_has_responseroutingentry()
      ? *msg_.responseroutingentry_
      : *reinterpret_cast< ::message::ResponseRoutingEntry*>(&::message::_ResponseRoutingEntry_default_instance_);
}
inline const ::message::ResponseRoutingEntry& Message::responseroutingentry() const {
  // @@protoc_insertion_point(field_get:message.Message.responseRoutingEntry)
  return _internal_responseroutingentry();
}
inline ::message::ResponseRoutingEntry* Message::unsafe_arena_release_responseroutingentry() {
  // @@protoc_insertion_point(field_unsafe_arena_release:message.Message.responseRoutingEntry)
  if (_internal_has_responseroutingentry()) {
    clear_has_msg();
    ::message::ResponseRoutingEntry* temp = msg_.responseroutingentry_;
    msg_.responseroutingentry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_responseroutingentry(::message::ResponseRoutingEntry* responseroutingentry) {
  clear_msg();
  if (responseroutingentry) {
    set_has_responseroutingentry();
    msg_.responseroutingentry_ = responseroutingentry;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.Message.responseRoutingEntry)
}
inline ::message::ResponseRoutingEntry* Message::_internal_mutable_responseroutingentry() {
  if (!_internal_has_responseroutingentry()) {
    clear_msg();
    set_has_responseroutingentry();
    msg_.responseroutingentry_ = CreateMaybeMessage< ::message::ResponseRoutingEntry >(GetArena());
  }
  return msg_.responseroutingentry_;
}
inline ::message::ResponseRoutingEntry* Message::mutable_responseroutingentry() {
  // @@protoc_insertion_point(field_mutable:message.Message.responseRoutingEntry)
  return _internal_mutable_responseroutingentry();
}

inline bool Message::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void Message::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline Message::MsgCase Message::msg_case() const {
  return Message::MsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Response

// string status = 1;
inline void Response::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Response::status() const {
  // @@protoc_insertion_point(field_get:message.Response.status)
  return _internal_status();
}
inline void Response::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:message.Response.status)
}
inline std::string* Response::mutable_status() {
  // @@protoc_insertion_point(field_mutable:message.Response.status)
  return _internal_mutable_status();
}
inline const std::string& Response::_internal_status() const {
  return status_.Get();
}
inline void Response::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.Response.status)
}
inline void Response::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:message.Response.status)
}
inline void Response::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.Response.status)
}
inline std::string* Response::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response::release_status() {
  // @@protoc_insertion_point(field_release:message.Response.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.Response.status)
}

// -------------------------------------------------------------------

// DeleteNode

// .message.Node node = 1;
inline bool DeleteNode::_internal_has_node() const {
  return this != internal_default_instance() && node_ != nullptr;
}
inline bool DeleteNode::has_node() const {
  return _internal_has_node();
}
inline void DeleteNode::clear_node() {
  if (GetArena() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
}
inline const ::message::Node& DeleteNode::_internal_node() const {
  const ::message::Node* p = node_;
  return p != nullptr ? *p : *reinterpret_cast<const ::message::Node*>(
      &::message::_Node_default_instance_);
}
inline const ::message::Node& DeleteNode::node() const {
  // @@protoc_insertion_point(field_get:message.DeleteNode.node)
  return _internal_node();
}
inline void DeleteNode::unsafe_arena_set_allocated_node(
    ::message::Node* node) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.DeleteNode.node)
}
inline ::message::Node* DeleteNode::release_node() {
  
  ::message::Node* temp = node_;
  node_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::message::Node* DeleteNode::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:message.DeleteNode.node)
  
  ::message::Node* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::message::Node* DeleteNode::_internal_mutable_node() {
  
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::Node>(GetArena());
    node_ = p;
  }
  return node_;
}
inline ::message::Node* DeleteNode::mutable_node() {
  // @@protoc_insertion_point(field_mutable:message.DeleteNode.node)
  return _internal_mutable_node();
}
inline void DeleteNode::set_allocated_node(::message::Node* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete node_;
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(node);
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:message.DeleteNode.node)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AddToHashTable

// map<string, string> hashMap = 1;
inline int AddToHashTable::_internal_hashmap_size() const {
  return hashmap_.size();
}
inline int AddToHashTable::hashmap_size() const {
  return _internal_hashmap_size();
}
inline void AddToHashTable::clear_hashmap() {
  hashmap_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AddToHashTable::_internal_hashmap() const {
  return hashmap_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AddToHashTable::hashmap() const {
  // @@protoc_insertion_point(field_map:message.AddToHashTable.hashMap)
  return _internal_hashmap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AddToHashTable::_internal_mutable_hashmap() {
  return hashmap_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AddToHashTable::mutable_hashmap() {
  // @@protoc_insertion_point(field_mutable_map:message.AddToHashTable.hashMap)
  return _internal_mutable_hashmap();
}

// -------------------------------------------------------------------

// ShutDown

// -------------------------------------------------------------------

// ResponseLeafSet

// .message.List leaf = 1;
inline bool ResponseLeafSet::_internal_has_leaf() const {
  return this != internal_default_instance() && leaf_ != nullptr;
}
inline bool ResponseLeafSet::has_leaf() const {
  return _internal_has_leaf();
}
inline void ResponseLeafSet::clear_leaf() {
  if (GetArena() == nullptr && leaf_ != nullptr) {
    delete leaf_;
  }
  leaf_ = nullptr;
}
inline const ::message::List& ResponseLeafSet::_internal_leaf() const {
  const ::message::List* p = leaf_;
  return p != nullptr ? *p : *reinterpret_cast<const ::message::List*>(
      &::message::_List_default_instance_);
}
inline const ::message::List& ResponseLeafSet::leaf() const {
  // @@protoc_insertion_point(field_get:message.ResponseLeafSet.leaf)
  return _internal_leaf();
}
inline void ResponseLeafSet::unsafe_arena_set_allocated_leaf(
    ::message::List* leaf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leaf_);
  }
  leaf_ = leaf;
  if (leaf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.ResponseLeafSet.leaf)
}
inline ::message::List* ResponseLeafSet::release_leaf() {
  
  ::message::List* temp = leaf_;
  leaf_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::message::List* ResponseLeafSet::unsafe_arena_release_leaf() {
  // @@protoc_insertion_point(field_release:message.ResponseLeafSet.leaf)
  
  ::message::List* temp = leaf_;
  leaf_ = nullptr;
  return temp;
}
inline ::message::List* ResponseLeafSet::_internal_mutable_leaf() {
  
  if (leaf_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::List>(GetArena());
    leaf_ = p;
  }
  return leaf_;
}
inline ::message::List* ResponseLeafSet::mutable_leaf() {
  // @@protoc_insertion_point(field_mutable:message.ResponseLeafSet.leaf)
  return _internal_mutable_leaf();
}
inline void ResponseLeafSet::set_allocated_leaf(::message::List* leaf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete leaf_;
  }
  if (leaf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(leaf);
    if (message_arena != submessage_arena) {
      leaf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leaf, submessage_arena);
    }
    
  } else {
    
  }
  leaf_ = leaf;
  // @@protoc_insertion_point(field_set_allocated:message.ResponseLeafSet.leaf)
}

// -------------------------------------------------------------------

// ResponseNeighbourSet

// .message.List neighbours = 1;
inline bool ResponseNeighbourSet::_internal_has_neighbours() const {
  return this != internal_default_instance() && neighbours_ != nullptr;
}
inline bool ResponseNeighbourSet::has_neighbours() const {
  return _internal_has_neighbours();
}
inline void ResponseNeighbourSet::clear_neighbours() {
  if (GetArena() == nullptr && neighbours_ != nullptr) {
    delete neighbours_;
  }
  neighbours_ = nullptr;
}
inline const ::message::List& ResponseNeighbourSet::_internal_neighbours() const {
  const ::message::List* p = neighbours_;
  return p != nullptr ? *p : *reinterpret_cast<const ::message::List*>(
      &::message::_List_default_instance_);
}
inline const ::message::List& ResponseNeighbourSet::neighbours() const {
  // @@protoc_insertion_point(field_get:message.ResponseNeighbourSet.neighbours)
  return _internal_neighbours();
}
inline void ResponseNeighbourSet::unsafe_arena_set_allocated_neighbours(
    ::message::List* neighbours) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(neighbours_);
  }
  neighbours_ = neighbours;
  if (neighbours) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.ResponseNeighbourSet.neighbours)
}
inline ::message::List* ResponseNeighbourSet::release_neighbours() {
  
  ::message::List* temp = neighbours_;
  neighbours_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::message::List* ResponseNeighbourSet::unsafe_arena_release_neighbours() {
  // @@protoc_insertion_point(field_release:message.ResponseNeighbourSet.neighbours)
  
  ::message::List* temp = neighbours_;
  neighbours_ = nullptr;
  return temp;
}
inline ::message::List* ResponseNeighbourSet::_internal_mutable_neighbours() {
  
  if (neighbours_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::List>(GetArena());
    neighbours_ = p;
  }
  return neighbours_;
}
inline ::message::List* ResponseNeighbourSet::mutable_neighbours() {
  // @@protoc_insertion_point(field_mutable:message.ResponseNeighbourSet.neighbours)
  return _internal_mutable_neighbours();
}
inline void ResponseNeighbourSet::set_allocated_neighbours(::message::List* neighbours) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete neighbours_;
  }
  if (neighbours) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(neighbours);
    if (message_arena != submessage_arena) {
      neighbours = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, neighbours, submessage_arena);
    }
    
  } else {
    
  }
  neighbours_ = neighbours;
  // @@protoc_insertion_point(field_set_allocated:message.ResponseNeighbourSet.neighbours)
}

// -------------------------------------------------------------------

// ResponseRoutingEntry

// .message.List routingEntry = 1;
inline bool ResponseRoutingEntry::_internal_has_routingentry() const {
  return this != internal_default_instance() && routingentry_ != nullptr;
}
inline bool ResponseRoutingEntry::has_routingentry() const {
  return _internal_has_routingentry();
}
inline void ResponseRoutingEntry::clear_routingentry() {
  if (GetArena() == nullptr && routingentry_ != nullptr) {
    delete routingentry_;
  }
  routingentry_ = nullptr;
}
inline const ::message::List& ResponseRoutingEntry::_internal_routingentry() const {
  const ::message::List* p = routingentry_;
  return p != nullptr ? *p : *reinterpret_cast<const ::message::List*>(
      &::message::_List_default_instance_);
}
inline const ::message::List& ResponseRoutingEntry::routingentry() const {
  // @@protoc_insertion_point(field_get:message.ResponseRoutingEntry.routingEntry)
  return _internal_routingentry();
}
inline void ResponseRoutingEntry::unsafe_arena_set_allocated_routingentry(
    ::message::List* routingentry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routingentry_);
  }
  routingentry_ = routingentry;
  if (routingentry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:message.ResponseRoutingEntry.routingEntry)
}
inline ::message::List* ResponseRoutingEntry::release_routingentry() {
  
  ::message::List* temp = routingentry_;
  routingentry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::message::List* ResponseRoutingEntry::unsafe_arena_release_routingentry() {
  // @@protoc_insertion_point(field_release:message.ResponseRoutingEntry.routingEntry)
  
  ::message::List* temp = routingentry_;
  routingentry_ = nullptr;
  return temp;
}
inline ::message::List* ResponseRoutingEntry::_internal_mutable_routingentry() {
  
  if (routingentry_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::List>(GetArena());
    routingentry_ = p;
  }
  return routingentry_;
}
inline ::message::List* ResponseRoutingEntry::mutable_routingentry() {
  // @@protoc_insertion_point(field_mutable:message.ResponseRoutingEntry.routingEntry)
  return _internal_mutable_routingentry();
}
inline void ResponseRoutingEntry::set_allocated_routingentry(::message::List* routingentry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete routingentry_;
  }
  if (routingentry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(routingentry);
    if (message_arena != submessage_arena) {
      routingentry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routingentry, submessage_arena);
    }
    
  } else {
    
  }
  routingentry_ = routingentry;
  // @@protoc_insertion_point(field_set_allocated:message.ResponseRoutingEntry.routingEntry)
}

// -------------------------------------------------------------------

// RequestRoutingEntry

// int32 index = 1;
inline void RequestRoutingEntry::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestRoutingEntry::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestRoutingEntry::index() const {
  // @@protoc_insertion_point(field_get:message.RequestRoutingEntry.index)
  return _internal_index();
}
inline void RequestRoutingEntry::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void RequestRoutingEntry::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:message.RequestRoutingEntry.index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
